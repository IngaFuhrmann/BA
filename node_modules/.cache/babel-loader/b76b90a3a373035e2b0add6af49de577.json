{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\PieMobilnutzung.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, entries, arc, schemeDark2, scaleOrdinal, pie } from 'd3';\nimport useResizeObserver from \"./useReziseObserver\";\n\nfunction PieMobilNutzung({\n  data,\n  highlight\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState([0, 1.5]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selection = _useState2[0],\n        setSelection = _useState2[1];\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return; //var width = 450;\n    //var height = 450;\n    //var  margin = 40;\n\n    var pied = pie().value(d => d.value)(data);\n    var w = 300; //width\n\n    var h = 300; //height\n\n    var r = 100; //radius\n\n    var color = scaleOrdinal().domain(pied).range(schemeDark2); //  var radius = Math.min(width, height) / 2 - margin\n\n    var vis = svg.select(\"pie\") //create the SVG element inside the <body>\n    .data([pied]) //associate our data with the document\n    .attr(\"width\", w) //set the width and height of our visualization (these will be attributes of the <svg> tag\n    .attr(\"height\", h).join(\"g\").attr(\"class\", \"pie\") //make a group to hold our pie chart\n    .attr(\"transform\", \"translate(\" + r + \",\" + r + \")\"); //move the center of the pie chart from 0, 0 to radius, radius\n\n    var arc = svg.arc() //this will create <path> elements for us using arc data\n    .outerRadius(r);\n    var pie = layout.pie() //this will create arc data for us given a list of values\n    .value(function (d) {\n      return d.value;\n    }); //we must tell it out to access the value of each element in our data array\n\n    var arcs = vis.selectAll(\"g.slice\") //this selects all <g> elements with class slice (there aren't any yet)\n    .data(pie) //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) \n    .enter() //this will create <g> elements for every \"extra\" data element that should be associated with a selection. The result is creating a <g> for every object in the data array\n    .append(\"g\") //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)\n    .attr(\"class\", \"slice\"); //allow us to style things in the slices (like text)\n\n    arcs.append(\"path\").attr(\"fill\", function (d, i) {\n      return color(i);\n    }) //set the color for each slice to be chosen from the color function defined above\n    .attr(\"d\", arc); //this creates the actual SVG path using the associated data (pie) with the arc drawing function\n\n    arcs.append(\"text\") //add a label to each slice\n    .attr(\"transform\", function (d) {\n      //set the label's origin to the center of the arc\n      //we have to make sure to set these before calling arc.centroid\n      d.innerRadius = 0;\n      d.outerRadius = r;\n      return \"translate(\" + arc.centroid(d) + \")\"; //this gives us a pair of coordinates like [50, 50]\n    }).attr(\"text-anchor\", \"middle\") //center the text on it's origin\n    .text(function (d, i) {\n      return pied[i].ed;\n    }); //get the label from our original data array\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }));\n}\n\nexport default PieMobilNutzung;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/PieMobilnutzung.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","entries","arc","schemeDark2","scaleOrdinal","pie","useResizeObserver","PieMobilNutzung","data","highlight","svgRef","wrapperRef","dimensions","selection","setSelection","svg","current","pied","value","d","w","h","r","color","domain","range","vis","attr","join","outerRadius","layout","arcs","selectAll","enter","append","i","innerRadius","centroid","text","ed"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, entries, arc, schemeDark2, scaleOrdinal, pie} from 'd3';\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\n\r\nfunction PieMobilNutzung({ data, highlight }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selection, setSelection] = useState([0, 1.5]);\r\n \r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n        \r\n        if(!dimensions) return;\r\n        //var width = 450;\r\n        //var height = 450;\r\n        //var  margin = 40;\r\n        var pied = pie().value((d) => d.value)(data);\r\n        var w = 300;                        //width\r\n        var h = 300;                            //height\r\n        var r = 100;                           //radius\r\n        var color = scaleOrdinal()\r\n        .domain(pied)\r\n         .range(schemeDark2);\r\n    \r\n        \r\n       \r\n\r\n      //  var radius = Math.min(width, height) / 2 - margin\r\n\r\n                        var vis = svg.select(\"pie\")\r\n                                      //create the SVG element inside the <body>\r\n                        .data([pied])                   //associate our data with the document\r\n                        .attr(\"width\", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag\r\n                        .attr(\"height\", h)\r\n                        .join(\"g\")  \r\n                        .attr(\"class\", \"pie\")              //make a group to hold our pie chart\r\n                        .attr(\"transform\", \"translate(\" + r + \",\" + r + \")\")    //move the center of the pie chart from 0, 0 to radius, radius\r\n\r\n                    var arc = svg.arc()              //this will create <path> elements for us using arc data\r\n                        .outerRadius(r);\r\n\r\n                    var pie = layout.pie()           //this will create arc data for us given a list of values\r\n                        .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array\r\n\r\n                    var arcs = vis.selectAll(\"g.slice\")     //this selects all <g> elements with class slice (there aren't any yet)\r\n                        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) \r\n                        .enter()                            //this will create <g> elements for every \"extra\" data element that should be associated with a selection. The result is creating a <g> for every object in the data array\r\n                            .append(\"g\")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)\r\n                                .attr(\"class\", \"slice\");    //allow us to style things in the slices (like text)\r\n\r\n                        arcs.append(\"path\")\r\n                                .attr(\"fill\", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above\r\n                                .attr(\"d\", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function\r\n\r\n                        arcs.append(\"text\")                                     //add a label to each slice\r\n                                .attr(\"transform\", function(d) {                    //set the label's origin to the center of the arc\r\n                                //we have to make sure to set these before calling arc.centroid\r\n                                d.innerRadius = 0;\r\n                                d.outerRadius = r;\r\n                                return \"translate(\" + arc.centroid(d) + \")\";        //this gives us a pair of coordinates like [50, 50]\r\n                            })\r\n                            .attr(\"text-anchor\", \"middle\")                          //center the text on it's origin\r\n                            .text(function(d, i) { return pied[i].ed; });        //get the label from our original data array\r\n                        \r\n                            \r\n    }, [data, dimensions]);\r\n\r\n\r\nreturn (\r\n    <div ref={wrapperRef} >\r\n       <svg ref={svgRef}>\r\n       </svg>\r\n     </div>\r\n );\r\n }\r\n \r\n export default PieMobilNutzung;"]},"metadata":{},"sourceType":"module"}