{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\nimport '../../styles/charts.css';\n\nconst useResizeObserver = ref => {\n  //Beobachtet die Größe des Browsers\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nfunction LineCharts({\n  data\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    console.log(dimensions);\n    if (!dimensions) return;\n    const xScale = scaleLinear().domain([0, data.length]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n    // .padding(0.5);\n\n    const yScale = scaleLinear().domain([0, 100]) //todo\n    .range([dimensions.height, 0]); //change\n\n    const colorScale = scaleLinear().domain([75, 100, 100]).range([\"green\", \"orange\", \"red\"]).clamp(true);\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', `translateX(${dimensions.width}px -100)`).call(yAxis);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).call(xAxis);\n    /**  svg\r\n     .selectAll('circle')\r\n     .data(data)\r\n     .join('circle')\r\n     .attr(\"r\", value => value)\r\n     .attr('cx', value => value * 2)\r\n     .attr(\"cy\", value => value * 2)\r\n     .attr(\"stroke\", 'red');*/\n\n    const myLine = line().x((value, index) => xScale(index)).y(yScale).curve(curveCardinal);\n    svg.selectAll(\".line\").data([data]).join(\"path\").attr(\"class\", \"line\").attr('d', myLine).attr('fill', 'none').attr(\"stroke\", \"#2770bc\").attr(\"stroke-width\", 2.5);\n    /* .selectAll(\".bar\")\r\n     .data(data)\r\n     .join(\"rect\")\r\n     .attr(\"class\", \"bar\")\r\n     .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n     .attr(\"x\", (value, index) => xScale(index))\r\n     .attr(\"y\", -dimensions.height) //Animation: nach unten, weil die Bars gedreht wurden\r\n     .attr(\"width\", xScale.bandwidth())\r\n     .on(\"mouseenter\", (value, index) => {\r\n        svg //Tooltip\r\n        .selectAll(\".tooltip\")\r\n        .data([value])\r\n        .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n        .attr(\"class\", \"tooltip\")\r\n        .text(value)\r\n        .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n        \r\n        .attr(\"text-anchor\", \"middle\")\r\n        .transition()\r\n        .attr(\"y\", yScale(value) - 8)\r\n        .attr(\"opacity\", 1);\r\n     })\r\n     .on(\"mouseleave\", () => \r\n     svg\r\n     .select(\".tooltip\").remove())\r\n     .transition()\r\n     .attr(\"fill\", colorScale)\r\n     .attr(\"height\", value => dimensions.height - yScale(value))*/\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleLinear","scaleBand","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","LineCharts","data","svgRef","wrapperRef","svg","console","log","xScale","domain","length","range","width","yScale","height","colorScale","clamp","yAxis","style","call","xAxis","ticks","myLine","x","value","index","y","curve","selectAll","join","attr"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\r\nimport '../../styles/charts.css'\r\n\r\nconst useResizeObserver = ref => { //Beobachtet die Größe des Browsers\r\n   const [dimensions, setDimensions] = useState(null);\r\n   useEffect(() => {\r\n     const observeTarget = ref.current;\r\n     const resizeObserver = new ResizeObserver(entries => {\r\n       entries.forEach(entry => {\r\n         setDimensions(entry.contentRect);\r\n       });\r\n     });\r\n     resizeObserver.observe(observeTarget);\r\n     return () => {\r\n       resizeObserver.unobserve(observeTarget);\r\n     };\r\n   }, [ref]);\r\n   return dimensions;\r\n };\r\n\r\n\r\nfunction LineCharts({ data }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n         console.log(dimensions);\r\n\r\n         if(!dimensions) return;\r\n      \r\n      const xScale = scaleLinear()\r\n         .domain([0, data.length]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        // .padding(0.5);\r\n\r\n      const yScale =  scaleLinear()\r\n         .domain([0, 100])   //todo\r\n         .range([dimensions.height, 0]);  //change\r\n\r\n      \r\n         const colorScale =  scaleLinear()\r\n         .domain([75, 100, 100])\r\n         .range([\"green\", \"orange\", \"red\"])\r\n         .clamp(true);  \r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', `translateX(${dimensions.width}px -100)`)\r\n         .call(yAxis);\r\n\r\n     const xAxis = axisBottom(xScale).ticks(data.length);\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .call(xAxis);\r\n     /**  svg\r\n      .selectAll('circle')\r\n      .data(data)\r\n      .join('circle')\r\n      .attr(\"r\", value => value)\r\n      .attr('cx', value => value * 2)\r\n      .attr(\"cy\", value => value * 2)\r\n      .attr(\"stroke\", 'red');*/\r\n      const myLine = line()\r\n      .x((value, index) => xScale(index)) \r\n      .y(yScale)\r\n      .curve(curveCardinal);\r\n\r\n      svg\r\n      .selectAll(\".line\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr('d', myLine)\r\n      .attr('fill', 'none')\r\n      .attr(\"stroke\", \"#2770bc\")\r\n      .attr(\"stroke-width\", 2.5)\r\n\r\n   /* .selectAll(\".bar\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n    .attr(\"class\", \"bar\")\r\n    .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n    .attr(\"x\", (value, index) => xScale(index))\r\n    .attr(\"y\", -dimensions.height) //Animation: nach unten, weil die Bars gedreht wurden\r\n    .attr(\"width\", xScale.bandwidth())\r\n    .on(\"mouseenter\", (value, index) => {\r\n       svg //Tooltip\r\n       .selectAll(\".tooltip\")\r\n       .data([value])\r\n       .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n       .attr(\"class\", \"tooltip\")\r\n       .text(value)\r\n       .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n       \r\n       .attr(\"text-anchor\", \"middle\")\r\n       .transition()\r\n       .attr(\"y\", yScale(value) - 8)\r\n       .attr(\"opacity\", 1);\r\n    })\r\n    .on(\"mouseleave\", () => \r\n    svg\r\n    .select(\".tooltip\").remove())\r\n    .transition()\r\n    .attr(\"fill\", colorScale)\r\n    .attr(\"height\", value => dimensions.height - yScale(value))*/\r\n   }, [data, dimensions]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}