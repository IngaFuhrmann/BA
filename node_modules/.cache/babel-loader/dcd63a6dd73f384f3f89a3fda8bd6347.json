{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleLinear } from 'd3';\nimport '../../styles/charts.css'; //dynamische Daten\n\nfunction LineCharts() {\n  const _useState = useState([25, 30, 45, 60, 20, 65, 75]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const svgRef = useRef(); //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const xScale = scaleLinear().domain([0, data.length - 1]) //0 zu 0 ; 6 zu 200\n    .range([0, 1000]);\n    const yScale = scaleLinear().domain([10, 500]).range([500, 0]);\n    const xAxis = axisBottom(xScale);\n    svg.select('.x-axis').style('transform', 'translateY(0)').call(xAxis);\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', 'translateX(500px)').call(yAxis);\n    const myLine = line().x((value, index) => xScale(index)).y(yScale).curve(curveCardinal);\n    /**  svg\r\n     .selectAll('circle')\r\n     .data(data)\r\n     .join('circle')\r\n     .attr(\"r\", value => value)\r\n     .attr('cx', value => value * 2)\r\n     .attr(\"cy\", value => value * 2)\r\n     .attr(\"stroke\", 'red');*/\n\n    svg.selectAll(\".line\").data([data]).join(\"path\").attr(\"class\", \"line\").attr('d', myLine).attr('fill', 'none').attr(\"stroke\", \"blue\");\n  }, [data]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    width: \"1000\",\n    height: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => setData(data.map(value => value + 5)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"Update data\"), React.createElement(\"button\", {\n    onClick: () => setData(data.filter(value => value < 35)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Filter data\"));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleLinear","LineCharts","data","setData","svgRef","svg","current","xScale","domain","length","range","yScale","xAxis","style","call","yAxis","myLine","x","value","index","y","curve","selectAll","join","attr","map","filter"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DC,WAA5D,QAA+E,IAA/E;AACA,OAAO,yBAAP,C,CAEA;;AAEA,SAASC,UAAT,GAAsB;AAAA,oBACKP,QAAQ,CAAC,CAAC,EAAD,EAAK,EAAL,EAAS,EAAT,EAAa,EAAb,EAAiB,EAAjB,EAAqB,EAArB,EAAyB,EAAzB,CAAD,CADb;AAAA;AAAA,QACZQ,IADY;AAAA,QACNC,OADM;;AAEnB,QAAMC,MAAM,GAAGZ,MAAM,EAArB,CAFmB,CAInB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMY,GAAG,GAAGV,MAAM,CAACS,MAAM,CAACE,OAAR,CAAlB;AACA,UAAMC,MAAM,GAAGP,WAAW,GACtBQ,MADW,CACJ,CAAC,CAAD,EAAIN,IAAI,CAACO,MAAL,GAAc,CAAlB,CADI,EACkB;AADlB,KAEXC,KAFW,CAEL,CAAC,CAAD,EAAI,IAAJ,CAFK,CAAf;AAIA,UAAMC,MAAM,GAAIX,WAAW,GACvBQ,MADY,CACL,CAAC,EAAD,EAAK,GAAL,CADK,EAEZE,KAFY,CAEN,CAAC,GAAD,EAAM,CAAN,CAFM,CAAhB;AAKA,UAAME,KAAK,GAAGd,UAAU,CAACS,MAAD,CAAxB;AACGF,IAAAA,GAAG,CAACV,MAAJ,CAAW,SAAX,EACCkB,KADD,CACO,WADP,EACoB,eADpB,EAECC,IAFD,CAEMF,KAFN;AAIH,UAAMG,KAAK,GAAGhB,QAAQ,CAACY,MAAD,CAAtB;AACAN,IAAAA,GAAG,CAACV,MAAJ,CAAW,SAAX,EACIkB,KADJ,CACU,WADV,EACuB,mBADvB,EAEIC,IAFJ,CAESC,KAFT;AAIA,UAAMC,MAAM,GAAGpB,IAAI,GACfqB,CADW,CACT,CAACC,KAAD,EAAQC,KAAR,KAAkBZ,MAAM,CAACY,KAAD,CADf,EAEXC,CAFW,CAETT,MAFS,EAGXU,KAHW,CAGLxB,aAHK,CAAf;AAID;;;;;;;;;AAQCQ,IAAAA,GAAG,CACFiB,SADD,CACW,OADX,EAECpB,IAFD,CAEM,CAACA,IAAD,CAFN,EAGCqB,IAHD,CAGM,MAHN,EAICC,IAJD,CAIM,OAJN,EAIe,MAJf,EAKCA,IALD,CAKM,GALN,EAKWR,MALX,EAMCQ,IAND,CAMM,MANN,EAMc,MANd,EAOCA,IAPD,CAOM,QAPN,EAOgB,MAPhB;AAQF,GAzCQ,EAyCN,CAACtB,IAAD,CAzCM,CAAT;AA0CA,SAAO,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,GAAG,EAAEE,MAAV;AAAkB,IAAA,KAAK,EAAC,MAAxB;AAA+B,IAAA,MAAM,EAAC,KAAtC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEG;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,EAME;AAAQ,IAAA,OAAO,EAAE,MAAMD,OAAO,CAACD,IAAI,CAACuB,GAAL,CAASP,KAAK,IAAIA,KAAK,GAAG,CAA1B,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBANF,EASE;AAAQ,IAAA,OAAO,EAAE,MAAMf,OAAO,CAACD,IAAI,CAACwB,MAAL,CAAYR,KAAK,IAAIA,KAAK,GAAG,EAA7B,CAAD,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATF,CAAP;AAaF;;AAED,eAAejB,UAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleLinear } from 'd3';\r\nimport '../../styles/charts.css'\r\n\r\n//dynamische Daten\r\n\r\nfunction LineCharts() {\r\n   const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   const svgRef = useRef();\r\n   \r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n      const xScale = scaleLinear()\r\n         .domain([0, data.length - 1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, 1000])\r\n\r\n      const yScale =  scaleLinear()\r\n         .domain([10, 500])\r\n         .range([500, 0]);  \r\n\r\n      \r\n      const xAxis = axisBottom(xScale);\r\n         svg.select('.x-axis')\r\n         .style('transform', 'translateY(0)')\r\n         .call(xAxis);\r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', 'translateX(500px)')\r\n         .call(yAxis);\r\n\r\n      const myLine = line()\r\n         .x((value, index) => xScale(index)) \r\n         .y(yScale)\r\n         .curve(curveCardinal);\r\n     /**  svg\r\n      .selectAll('circle')\r\n      .data(data)\r\n      .join('circle')\r\n      .attr(\"r\", value => value)\r\n      .attr('cx', value => value * 2)\r\n      .attr(\"cy\", value => value * 2)\r\n      .attr(\"stroke\", 'red');*/\r\n      svg\r\n      .selectAll(\".line\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr('d', myLine)\r\n      .attr('fill', 'none')\r\n      .attr(\"stroke\", \"blue\");\r\n   }, [data]);\r\n   return <React.Fragment>\r\n            <svg ref={svgRef} width=\"1000\" height=\"500\">\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            <br/>\r\n            <button onClick={() => setData(data.map(value => value + 5))}>\r\n              Update data\r\n            </button>\r\n            <button onClick={() => setData(data.filter(value => value < 35))}>\r\n              Filter data\r\n            </button>\r\n         </React.Fragment>\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}