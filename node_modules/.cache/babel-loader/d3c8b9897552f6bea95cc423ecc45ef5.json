{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\GeoChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\nimport useResizeObserver from './useReziseObserver';\nimport '../../styles/header.css'; //import data from \"./charts/GeoChart.europe.geo.json\"\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCountry = _useState2[0],\n        setSelectedCountry = _useState2[1]; // will be called initially and on every data change\n\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const minProp = min(data.features, feature => feature.properties[property]);\n    const maxProp = max(data.features, feature => feature.properties[property]);\n    const colorScale = scaleLinear().domain([minProp, maxProp]).range([\"#ccc\", \"red\"]); // use resized dimensions\n    // but fall back to getBoundingClientRect, if no dimensions yet.\n\n    const _ref = dimensions || wrapperRef.current.getBoundingClientRect(),\n          width = _ref.width,\n          height = _ref.height; // projects geo-coordinates on a 2D plane\n\n\n    const projection = geoMercator().fitSize([width, height], selectedCountry || data).precision(100); // takes geojson data,\n    // transforms that into the d attribute of a path element\n\n    const pathGenerator = geoPath().projection(projection); // render each country\n\n    svg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\", feature => {\n      setSelectedCountry(selectedCountry === feature ? null : feature);\n    }).attr(\"class\", \"country\").transition().attr(\"fill\", feature => colorScale(feature.properties[property])).attr(\"d\", feature => pathGenerator(feature)); // render text\n\n    svg.selectAll(\".label\").data([selectedCountry]).join(\"text\").attr(\"class\", \"label\").text(feature => feature && feature.properties.name + \": \" + feature.properties[property].toLocaleString()).attr(\"x\", 10).attr(\"y\", 25);\n  }, [data, dimensions, property, selectedCountry]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/GeoChart.jsx"],"names":["React","useRef","useEffect","useState","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","getBoundingClientRect","width","height","projection","fitSize","precision","pathGenerator","selectAll","join","on","attr","transition","text","name","toLocaleString","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport useResizeObserver from './useReziseObserver'\r\nimport '../../styles/header.css'\r\n//import data from \"./charts/GeoChart.europe.geo.json\"\r\n\r\n\r\nfunction GeoChart({ data, property }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n  \r\n    // will be called initially and on every data change\r\n    useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n  \r\n      const minProp = min(data.features, feature => feature.properties[property]);\r\n      const maxProp = max(data.features, feature => feature.properties[property]);\r\n      const colorScale = scaleLinear()\r\n        .domain([minProp, maxProp])\r\n        .range([\"#ccc\", \"red\"]);\r\n  \r\n      // use resized dimensions\r\n      // but fall back to getBoundingClientRect, if no dimensions yet.\r\n      const { width, height } =\r\n        dimensions || wrapperRef.current.getBoundingClientRect();\r\n  \r\n      // projects geo-coordinates on a 2D plane\r\n      const projection = geoMercator()\r\n        .fitSize([width, height], selectedCountry || data)\r\n        .precision(100);\r\n  \r\n      // takes geojson data,\r\n      // transforms that into the d attribute of a path element\r\n      const pathGenerator = geoPath().projection(projection);\r\n  \r\n      // render each country\r\n      svg\r\n        .selectAll(\".country\")\r\n        .data(data.features)\r\n        .join(\"path\")\r\n        .on(\"click\", feature => {\r\n          setSelectedCountry(selectedCountry === feature ? null : feature);\r\n        })\r\n        .attr(\"class\", \"country\")\r\n        .transition()\r\n        .attr(\"fill\", feature => colorScale(feature.properties[property]))\r\n        .attr(\"d\", feature => pathGenerator(feature));\r\n  \r\n      // render text\r\n      svg\r\n        .selectAll(\".label\")\r\n        .data([selectedCountry])\r\n        .join(\"text\")\r\n        .attr(\"class\", \"label\")\r\n        .text(\r\n          feature =>\r\n            feature &&\r\n            feature.properties.name +\r\n              \": \" +\r\n              feature.properties[property].toLocaleString()\r\n        )\r\n        .attr(\"x\", 10)\r\n        .attr(\"y\", 25);\r\n    }, [data, dimensions, property, selectedCountry]);\r\n  \r\n    return (\r\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n        <svg ref={svgRef}></svg>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default GeoChart;"]},"metadata":{},"sourceType":"module"}