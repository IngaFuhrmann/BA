{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React, { useEffect } from \"react\";\n\nconst useResizeObserver = ref => {\n  //Beobachtet die Größe des Browsers\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/useReziseObserver.js"],"names":["React","useEffect","useResizeObserver","ref","useState","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,iBAAiB,GAAGC,GAAG,IAAI;AAAE;AAAF,oBACOC,QAAQ,CAAC,IAAD,CADf;AAAA;AAAA,QACtBC,UADsB;AAAA,QACVC,aADU;;AAE7BL,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMM,aAAa,GAAGJ,GAAG,CAACK,OAA1B;AACA,UAAMC,cAAc,GAAG,IAAIC,cAAJ,CAAmBC,OAAO,IAAI;AACnDA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvBP,QAAAA,aAAa,CAACO,KAAK,CAACC,WAAP,CAAb;AACD,OAFD;AAGD,KAJsB,CAAvB;AAKAL,IAAAA,cAAc,CAACM,OAAf,CAAuBR,aAAvB;AACA,WAAO,MAAM;AACXE,MAAAA,cAAc,CAACO,SAAf,CAAyBT,aAAzB;AACD,KAFD;AAGD,GAXQ,EAWN,CAACJ,GAAD,CAXM,CAAT;AAYA,SAAOE,UAAP;AACD,CAfH;;AAiBE,eAAeH,iBAAf","sourcesContent":["import React, { useEffect } from \"react\";\r\n\r\nconst useResizeObserver = ref => { //Beobachtet die Größe des Browsers\r\n    const [dimensions, setDimensions] = useState(null);\r\n    useEffect(() => {\r\n      const observeTarget = ref.current;\r\n      const resizeObserver = new ResizeObserver(entries => {\r\n        entries.forEach(entry => {\r\n          setDimensions(entry.contentRect);\r\n        });\r\n      });\r\n      resizeObserver.observe(observeTarget);\r\n      return () => {\r\n        resizeObserver.unobserve(observeTarget);\r\n      };\r\n    }, [ref]);\r\n    return dimensions;\r\n  };\r\n\r\n  export default useResizeObserver;"]},"metadata":{},"sourceType":"module"}