{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\AreaIKTBesch\\xE4ftigung.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleOrdinal, scaleTime, scaleLinear, scaleBand, csv, min, max, event, entries, bisector, mouse, curveLinear, area, nest, extent, timeParse } from 'd3';\nimport useResizeObserver from \"./useReziseObserver\";\n\nfunction AreaIKTBeschäftigung({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState([0, 1.5]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selection = _useState2[0],\n        setSelection = _useState2[1]; // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    var filtered = data.filter(a => a.geo == property); //const test = data.value[0];\n    // console.log(test);\n\n    if (!dimensions) return; //Sortieren nach Jahreszahl\n    //Read the data\n\n    csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/5_OneCatSevNumOrdered.csv\", function (data) {\n      // group the data: I want to draw one line per group\n      var sumstat = nest() // nest function allows to group the calculation per level of a factor\n      .key(function (d) {\n        return d.name;\n      }).entries(data); // Add X axis --> it is a date format\n\n      var x = scaleLinear().domain(extent(data, function (d) {\n        return d.year;\n      })).range([0, dimensions.width]);\n      svg.append(\"g\").attr(\"transform\", \"translate(0,\" + dimensions.height + \")\").call(axisBottom(x).ticks(5)); // Add Y axis\n\n      var y = scaleLinear().domain([0, max(data, function (d) {\n        return +d.n;\n      })]).range([dimensions.height, 0]);\n      svg.append(\"g\").call(axisLeft(y)); // color palette\n\n      var res = sumstat.map(function (d) {\n        return d.key;\n      }); // list of group names\n\n      var color = scaleOrdinal().domain(res).range(['#e41a1c', '#377eb8', '#4daf4a', '#984ea3', '#ff7f00', '#ffff33', '#a65628', '#f781bf', '#999999']); // Draw the line\n\n      svg.selectAll(\".line\").data([sumstat]).enter().append(\"path\").attr(\"fill\", \"none\").attr(\"stroke\", function (d) {\n        return color(d.key);\n      }).attr(\"stroke-width\", 1.5).attr(\"d\", function (d) {\n        return line().x(function (d) {\n          return x(d.year);\n        }).y(function (d) {\n          return y(+d.n);\n        })(d.values);\n      });\n    });\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    className: \"IKTWarapperRef\",\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n}\n\nexport default AreaIKTBeschäftigung;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/AreaIKTBeschäftigung.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleOrdinal","scaleTime","scaleLinear","scaleBand","csv","min","max","event","entries","bisector","mouse","curveLinear","area","nest","extent","timeParse","useResizeObserver","AreaIKTBeschäftigung","data","property","svgRef","wrapperRef","dimensions","selection","setSelection","svg","current","filtered","filter","a","geo","sumstat","key","d","name","x","domain","year","range","width","append","attr","height","call","ticks","y","n","res","map","color","selectAll","enter","values"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleOrdinal, scaleTime, scaleLinear, scaleBand, csv, min, max, event, entries,bisector, mouse, curveLinear, area, nest, extent, timeParse} from 'd3';\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\nfunction AreaIKTBeschäftigung({ data, property }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   const [selection, setSelection] = useState([0, 1.5]);\r\n  // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n\r\n      const svg = select(svgRef.current);\r\n\r\n      var filtered = data.filter(a=>a.geo==property);\r\n\r\n      //const test = data.value[0];\r\n     // console.log(test);\r\n         if(!dimensions) return;\r\n      \r\n      //Sortieren nach Jahreszahl\r\n\r\n     //Read the data\r\ncsv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/5_OneCatSevNumOrdered.csv\", function(data) {\r\n\r\n  // group the data: I want to draw one line per group\r\n  var sumstat = nest() // nest function allows to group the calculation per level of a factor\r\n    .key(function(d) { return d.name;})\r\n    .entries(data);\r\n\r\n  // Add X axis --> it is a date format\r\n  var x = scaleLinear()\r\n    .domain(extent(data, function(d) { return d.year; }))\r\n    .range([ 0, dimensions.width ]);\r\n  svg.append(\"g\")\r\n    .attr(\"transform\", \"translate(0,\" + dimensions.height + \")\")\r\n    .call(axisBottom(x).ticks(5));\r\n\r\n  // Add Y axis\r\n  var y = scaleLinear()\r\n    .domain([0, max(data, function(d) { return +d.n; })])\r\n    .range([ dimensions.height, 0 ]);\r\n  svg.append(\"g\")\r\n    .call(axisLeft(y));\r\n\r\n  // color palette\r\n  var res = sumstat.map(function(d){ return d.key }) // list of group names\r\n  var color = scaleOrdinal()\r\n    .domain(res)\r\n    .range(['#e41a1c','#377eb8','#4daf4a','#984ea3','#ff7f00','#ffff33','#a65628','#f781bf','#999999'])\r\n\r\n  // Draw the line\r\n  svg.selectAll(\".line\")\r\n      .data([sumstat])\r\n      .enter()\r\n      .append(\"path\")\r\n        .attr(\"fill\", \"none\")\r\n        .attr(\"stroke\", function(d){ return color(d.key) })\r\n        .attr(\"stroke-width\", 1.5)\r\n        .attr(\"d\", function(d){\r\n          return line()\r\n            .x(function(d) { return x(d.year); })\r\n            .y(function(d) { return y(+d.n); })\r\n            (d.values)\r\n        })\r\n\r\n})\r\n\r\n\r\n   }, [data, dimensions, property]);\r\n    return (\r\n     <div  className=\"IKTWarapperRef\" ref={wrapperRef} >\r\n        <svg ref={svgRef}>\r\n          <g className=\"x-axis\" />\r\n          <g className=\"y-axis\" />\r\n        </svg>\r\n      </div>\r\n    );\r\n    }\r\n    \r\n    export default AreaIKTBeschäftigung;"]},"metadata":{},"sourceType":"module"}