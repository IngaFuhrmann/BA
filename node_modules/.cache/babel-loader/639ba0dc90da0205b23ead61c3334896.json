{"ast":null,"code":"import _objectSpread from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks } from 'd3';\nimport '../../styles/charts.css';\nimport useResizeObserver from './useReziseObserver';\n\nfunction LineCharts({\n  data,\n  data1,\n  highlight\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState([0, 1.5]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selection = _useState2[0],\n        setSelection = _useState2[1]; // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\n\n\n  useEffect(() => {\n    let dataData = _objectSpread({}, data, {}, data1);\n\n    console.log(dataData);\n    const svg = select(svgRef.current); //const test = data.value[0];\n    // console.log(test);\n\n    if (!dimensions) return; //Sortieren nach Jahreszahl\n\n    const minDate = new Date(min(data, value => value));\n    const maxDate = new Date(max(data, value => value));\n    console.log(minDate);\n    console.log(maxDate);\n    const xScale = scaleTime().domain([minDate, maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n\n    const yScale = scaleLinear().domain([0, 100]) //todo\n    .range([dimensions.height, 30]); //change\n\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('color', 'grey').style('font-size', '14').call(yAxis); //X-Achsen-Beschriftung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"fill\", \"grey\").attr(\"x\", dimensions.width).attr(\"y\", dimensions.height + 50).text(\"Jahr\");\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).style('color', 'grey').style('font-size', '14').style('stroke-width', 1).call(xAxis); //Grids\n\n    var grids = svg.append(\"g\").attr(\"class\", \"grid\") //.attr('transform', 'translate(50,50)')\n    .call(axisLeft(yScale).tickSize(-dimensions.width).tickFormat(\"\")); //Y-Achsen-Beschrifzung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"grey\").attr(\"y\", -50).attr(\"x\", 0).text(\"Prozent\"); //Tooltip-Circle\n\n    var focus = svg.append('g').append('circle').style(\"fill\", \"#2770bc\").attr('r', 8.5).style(\"opacity\", 0); //Tooltip- Values\n\n    var focusText = svg.append('g').append('text').style(\"opacity\", 0).attr(\"text-anchor\", \"left\").attr(\"alignment-baseline\", \"middle\");\n    svg.append('rect').style(\"fill\", \"none\").style(\"pointer-events\", \"all\").attr('width', dimensions.width).attr('height', dimensions.height).on('mouseover', mouseover).on('mousemove', mousemove).on('mouseout', mouseout);\n    const myLine = line().x(d => xScale(new Date(d))).y(d => yScale(d.value) - dimensions.height).curve(curveCardinal);\n    svg.selectAll(\"path\").data([data]).join(\"path\").attr(\"d\", (value, index) => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"#2770bc\").attr(\"stroke-width\", \"5\");\n\n    function mouseover() {\n      focus.style(\"opacity\", 1).transition();\n      focusText.style(\"opacity\", 1).transition();\n    }\n\n    function mousemove() {\n      // recover coordinate we need\n      var x0 = xScale.invert(mouse(this)[0]);\n      const bisect = bisector(d => new Date(d.time)).left;\n      const idx = bisect(data, x0, 1);\n      const selectedData = data[idx];\n      console.log(selectedData);\n      focus.attr(\"cx\", xScale(new Date(selectedData.time))).attr(\"cy\", yScale(selectedData.value)).transition();\n      focusText.text(selectedData.time + \" : \" + selectedData.value).attr(\"x\", xScale(new Date(selectedData.time))).attr(\"y\", yScale(selectedData.value) - 30).transition();\n      /*  focus\r\n          .attr(\"cx\", xScale(selectedData.x))\r\n          .attr(\"cy\", yScale(selectedData.y))\r\n        focusText\r\n          .html(\"x:\" + selectedData.x + \"  -  \" + \"y:\" + selectedData.y)\r\n          .attr(\"x\", selectedData.x)\r\n          .attr(\"y\", yScale(selectedData.y)) */\n    }\n\n    function mouseout() {\n      focus.style(\"opacity\", 0);\n      focusText.style(\"opacity\", 0);\n    }\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","useResizeObserver","LineCharts","data","data1","highlight","svgRef","wrapperRef","dimensions","selection","setSelection","dataData","console","log","svg","current","minDate","Date","value","maxDate","xScale","domain","range","width","yScale","height","yAxis","style","call","append","attr","text","xAxis","grids","tickSize","tickFormat","focus","focusText","on","mouseover","mousemove","mouseout","myLine","x","d","y","curve","selectAll","join","index","transition","x0","invert","bisect","time","left","idx","selectedData"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks} from 'd3';\r\nimport '../../styles/charts.css'\r\nimport useResizeObserver from './useReziseObserver'\r\n\r\nfunction LineCharts({ data, data1, highlight }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   const [selection, setSelection] = useState([0, 1.5]);\r\n  // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\r\n   useEffect(() => {\r\n\r\n     let dataData= {...data, ...data1};\r\n      console.log(dataData);\r\n\r\n      const svg = select(svgRef.current);\r\n      //const test = data.value[0];\r\n     // console.log(test);\r\n         if(!dimensions) return;\r\n      \r\n      //Sortieren nach Jahreszahl\r\n\r\n\r\n      const minDate = new Date (min(data, value => value));\r\n      const maxDate = new Date (max(data, value => value));\r\n\r\n      console.log(minDate);\r\n      console.log(maxDate);\r\n\r\n\r\n      const xScale = scaleTime()\r\n          .domain([minDate,maxDate])\r\n          \r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        \r\n      const yScale =  scaleLinear()\r\n         .domain([0, 100])   //todo\r\n         .range([dimensions.height, 30]);  //change\r\n\r\n      \r\n      const yAxis = axisLeft(yScale);   \r\n      svg\r\n      .select('.y-axis')\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .call(yAxis);\r\n\r\n      //X-Achsen-Beschriftung\r\n      svg.append(\"text\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"fill\", \"grey\")\r\n      .attr(\"x\", dimensions.width)\r\n       .attr(\"y\", dimensions.height  + 50)\r\n       .text(\"Jahr\");\r\n\r\n     const xAxis = axisBottom(xScale)\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .style('stroke-width', 1)\r\n      .call(xAxis);\r\n      \r\n      //Grids\r\n      var grids = svg.append(\"g\")\r\n         .attr(\"class\", \"grid\")\r\n         //.attr('transform', 'translate(50,50)')\r\n         .call(axisLeft(yScale)\r\n            .tickSize(-(dimensions.width))\r\n            .tickFormat(\"\")\r\n            )\r\n\r\n      //Y-Achsen-Beschrifzung\r\n      svg.append(\"text\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .attr(\"fill\", \"grey\")\r\n    .attr(\"y\", - 50)\r\n    .attr(\"x\", 0)\r\n    .text(\"Prozent\")\r\n\r\n    \r\n\r\n      //Tooltip-Circle\r\n      var focus = svg\r\n      .append('g')\r\n      .append('circle')\r\n      .style(\"fill\", \"#2770bc\")\r\n      .attr('r', 8.5)\r\n      .style(\"opacity\", 0);\r\n\r\n      //Tooltip- Values\r\n      var focusText = svg\r\n      .append('g')\r\n      .append('text')\r\n      .style(\"opacity\", 0)\r\n      .attr(\"text-anchor\", \"left\")\r\n      .attr(\"alignment-baseline\", \"middle\");\r\n\r\n      svg\r\n      .append('rect')\r\n      .style(\"fill\", \"none\")\r\n      .style(\"pointer-events\", \"all\")\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .on('mouseover', mouseover)\r\n      .on('mousemove', mousemove)\r\n      .on('mouseout', mouseout);\r\n\r\n      const myLine = line()\r\n      .x((d)=> (xScale(new Date(d))))\r\n      .y((d)=> (yScale(d.value) - dimensions.height))\r\n      .curve(curveCardinal);\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"d\", (value, index) => myLine(value))\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#2770bc\")\r\n      .attr(\"stroke-width\", \"5\" )\r\n      \r\n      function mouseover() {\r\n         \r\n         focus.style(\"opacity\", 1).transition()\r\n         focusText.style(\"opacity\",1).transition()\r\n       }\r\n       \r\n       function mousemove() {\r\n         // recover coordinate we need\r\n         var x0 = xScale.invert(mouse(this)[0]);\r\n         const bisect = bisector(d => new Date(d.time)).left;\r\n         const idx = bisect(data, x0, 1);\r\n         const selectedData = data[idx];\r\n         console.log( selectedData);\r\n         \r\n         focus\r\n         .attr(\"cx\", xScale(new Date (selectedData.time)))\r\n         .attr(\"cy\", yScale(selectedData.value))\r\n         .transition()\r\n\r\n         focusText\r\n            \r\n            .text(selectedData.time  + \" : \" + selectedData.value)\r\n            .attr(\"x\", xScale(new Date (selectedData.time)))\r\n            .attr(\"y\", yScale(selectedData.value) - 30)\r\n            .transition()\r\n            \r\n       /*  focus\r\n           .attr(\"cx\", xScale(selectedData.x))\r\n           .attr(\"cy\", yScale(selectedData.y))\r\n         focusText\r\n           .html(\"x:\" + selectedData.x + \"  -  \" + \"y:\" + selectedData.y)\r\n           .attr(\"x\", selectedData.x)\r\n           .attr(\"y\", yScale(selectedData.y)) */\r\n          \r\n         }\r\n       function mouseout() {\r\n         focus.style(\"opacity\", 0)\r\n         focusText.style(\"opacity\", 0)\r\n       }\r\n\r\n\r\n   }, [data, dimensions]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}