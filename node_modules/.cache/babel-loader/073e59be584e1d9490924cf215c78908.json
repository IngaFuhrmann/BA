{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, keys, entries } from 'd3';\nimport '../../styles/charts.css';\nimport useResizeObserver from './useReziseObserver';\n\nfunction LineCharts({\n  data,\n  property,\n  colorline\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCountry = _useState2[0],\n        setSelectedCountry = _useState2[1]; // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\n\n\n  useEffect(() => {\n    console.log(colorline);\n    const svg = select(svgRef.current); //  console.log(property);\n    //const test = data.value[0];\n    // console.log(test);\n\n    if (!dimensions) return;\n    var filtered = data.filter(a => a.geo == property);\n    var filterme;\n\n    for (var i = 0; i < filtered.length; i++) {\n      var filterme = filtered[i].time;\n    }\n\n    var vales = entries(filterme);\n    console.log(vales); //Sortieren nach Jahreszah\n\n    const minDate = new Date(min(vales, value => value.key));\n    const maxDate = new Date(max(vales, value => value.key));\n    console.log(minDate);\n    console.log(maxDate);\n    const xScale = scaleTime().domain([minDate - 2.628e+9, maxDate]) // It's the min date minus 2 months (in milliseconds   \n    // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n\n    const yScale = scaleLinear().domain([0, 100]) //todo\n    .range([dimensions.height, 30]); //change\n\n    const yAxis = axisLeft(yScale).tickSize(0);\n    svg.select('.y-axis').style('color', 'grey').style('font-size', '14').call(yAxis); //X-Achsen-Beschriftung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"fill\", \"grey\").attr(\"x\", dimensions.width).attr(\"y\", dimensions.height + 50).text(\"Jahr\");\n    const xAxis = axisBottom(xScale).ticks(4);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).style('color', 'grey').style('font-size', '14').style('stroke-width', 1).call(xAxis); //Grids\n\n    var grids = svg.append(\"g\").attr(\"class\", \"grid\") //.attr('transform', 'translate(50,50)')\n    .call(axisLeft(yScale).tickSize(-dimensions.width).tickFormat(\"\")); //Y-Achsen-Beschrifzung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"grey\").attr(\"y\", -50).attr(\"x\", 0).text(\"Prozent\"); //Tooltip-Circle\n\n    var focus = svg.append('g').append('circle').style(\"fill\", colorline).attr('r', 8.5).style(\"opacity\", 0); //Tooltip- Values\n\n    var focusText = svg.append('g').append('text').style(\"opacity\", 0).attr(\"text-anchor\", \"left\").attr(\"alignment-baseline\", \"middle\");\n    svg.append('rect').style(\"fill\", \"none\").style(\"pointer-events\", \"all\").attr('width', dimensions.width).attr('height', dimensions.height).on('mouseover', mouseover).on('mousemove', mousemove).on('mouseout', mouseout);\n    const myLine = line().x(d => xScale(new Date(d.key))).y(d => yScale(d.value) - dimensions.height).curve(curveCardinal);\n    svg.selectAll(\"path\").data([vales]).join(\"path\").attr(\"d\", (value, index) => myLine(value)).transition().attr(\"fill\", \"none\").attr(\"stroke\", colorline).attr(\"stroke-width\", \"5\").attr(\"stroke-linecap\", \"round\");\n\n    function mouseover() {\n      focus.style(\"opacity\", 1);\n      focusText.style(\"opacity\", 1);\n    }\n\n    function mousemove() {\n      // recover coordinate we need\n      var x0 = xScale.invert(mouse(this)[0]);\n      const bisect = bisector(d => new Date(d.key)).left;\n      const idx = bisect(vales, x0, 1);\n      const selectedData = vales[idx]; //  console.log(selectedData);\n      //  console.log(selectedData.value);\n\n      focus.transition().duration(80).attr(\"cx\", xScale(new Date(selectedData.key))).attr(\"cy\", yScale(selectedData.value));\n      focusText.transition().duration(80).text(selectedData.key + \" : \" + selectedData.value).attr(\"x\", xScale(new Date(selectedData.key))).attr(\"y\", yScale(selectedData.value) - 30);\n    }\n\n    function mouseout() {\n      focus.style(\"opacity\", 0);\n      focusText.style(\"opacity\", 0);\n    }\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","keys","entries","useResizeObserver","LineCharts","data","property","colorline","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","console","log","svg","current","filtered","filter","a","geo","filterme","i","length","time","vales","minDate","Date","value","key","maxDate","xScale","domain","range","width","yScale","height","yAxis","tickSize","style","call","append","attr","text","xAxis","grids","tickFormat","focus","focusText","on","mouseover","mousemove","mouseout","myLine","x","d","y","curve","selectAll","join","index","transition","x0","invert","bisect","left","idx","selectedData","duration"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, keys, entries} from 'd3';\r\nimport '../../styles/charts.css'\r\nimport useResizeObserver from './useReziseObserver'\r\n\r\nfunction LineCharts({ data, property, colorline}) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   const [selectedCountry, setSelectedCountry] = useState(null);\r\n  // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\r\n   useEffect(() => {\r\n      console.log(colorline);\r\n      const svg = select(svgRef.current);\r\n       //  console.log(property);\r\n      //const test = data.value[0];\r\n     // console.log(test);\r\n         if(!dimensions) return;\r\n      \r\n         var filtered = data.filter(a=>a.geo==property);\r\n         \r\n         var filterme;\r\n        for(var i = 0; i < filtered.length; i ++) {\r\n           var filterme = filtered[i].time; \r\n        }\r\n\r\n        var vales = entries(filterme);\r\n        console.log(vales);\r\n      //Sortieren nach Jahreszah\r\n      const minDate = new Date (min(vales, value => value.key));\r\n      const maxDate = new Date (max(vales, value => value.key));     \r\n\r\n      console.log(minDate);\r\n     console.log(maxDate);\r\n       \r\n\r\n      const xScale = scaleTime()\r\n          .domain([minDate - 2.628e+9,maxDate]) // It's the min date minus 2 months (in milliseconds   \r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        \r\n      const yScale =  scaleLinear()\r\n         .domain([0, 100])   //todo\r\n         .range([dimensions.height, 30]);  //change\r\n\r\n      \r\n      const yAxis = axisLeft(yScale).tickSize(0);   \r\n      svg\r\n      .select('.y-axis')\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .call(yAxis);\r\n\r\n      //X-Achsen-Beschriftung\r\n      svg.append(\"text\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"fill\", \"grey\")\r\n      .attr(\"x\", dimensions.width)\r\n       .attr(\"y\", dimensions.height  + 50)\r\n       .text(\"Jahr\");\r\n\r\n     const xAxis = axisBottom(xScale).ticks(4)\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .style('stroke-width', 1)\r\n      .call(xAxis);\r\n      \r\n      //Grids\r\n      var grids = svg.append(\"g\")\r\n         .attr(\"class\", \"grid\")\r\n         //.attr('transform', 'translate(50,50)')\r\n         .call(axisLeft(yScale)\r\n            .tickSize(-(dimensions.width))\r\n            .tickFormat(\"\")\r\n            )\r\n\r\n      //Y-Achsen-Beschrifzung\r\n      svg.append(\"text\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .attr(\"fill\", \"grey\")\r\n    .attr(\"y\", - 50)\r\n    .attr(\"x\", 0)\r\n    .text(\"Prozent\")\r\n\r\n     //Tooltip-Circle\r\n      var focus = svg\r\n      .append('g')\r\n      .append('circle')\r\n      .style(\"fill\", colorline)\r\n      .attr('r', 8.5)\r\n      .style(\"opacity\", 0);\r\n\r\n      //Tooltip- Values\r\n      var focusText = svg\r\n      .append('g')\r\n      .append('text')\r\n      .style(\"opacity\", 0)\r\n      .attr(\"text-anchor\", \"left\")\r\n      .attr(\"alignment-baseline\", \"middle\");\r\n\r\n      svg\r\n      .append('rect')\r\n      .style(\"fill\", \"none\")\r\n      .style(\"pointer-events\", \"all\")\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .on('mouseover', mouseover)\r\n      .on('mousemove', mousemove)\r\n      .on('mouseout', mouseout); \r\n      \r\n     \r\n    \r\n      const myLine = line()\r\n      .x((d)=> (xScale(new Date(d.key))))\r\n      .y((d)=> (yScale(d.value) - dimensions.height))\r\n      .curve(curveCardinal);\r\n         svg\r\n         .selectAll(\"path\")\r\n         .data([vales])\r\n         .join(\"path\")\r\n         .attr(\"d\", (value, index) => myLine(value))\r\n         .transition()\r\n         .attr(\"fill\", \"none\")\r\n         .attr(\"stroke\", colorline)\r\n         .attr(\"stroke-width\", \"5\" )\r\n         .attr(\"stroke-linecap\", \"round\")\r\n      \r\n      \r\n      function mouseover() {\r\n         focus.style(\"opacity\", 1)\r\n         focusText.style(\"opacity\",1)\r\n       }\r\n       \r\n       function mousemove() {\r\n         // recover coordinate we need\r\n         var x0 = xScale.invert(mouse(this)[0]);\r\n         const bisect = bisector(d => new Date(d.key)).left;\r\n         const idx = bisect(vales, x0, 1);\r\n         const selectedData = vales[idx];\r\n       //  console.log(selectedData);\r\n       //  console.log(selectedData.value);\r\n         \r\n         focus\r\n         .transition()\r\n         .duration(80)\r\n         .attr(\"cx\", xScale(new Date(selectedData.key)))\r\n         .attr(\"cy\", yScale(selectedData.value))\r\n        \r\n\r\n         focusText\r\n         .transition()\r\n         .duration(80)\r\n            .text(selectedData.key  + \" : \" + selectedData.value)\r\n            .attr(\"x\", xScale(new Date (selectedData.key)))\r\n            .attr(\"y\", yScale(selectedData.value) - 30)\r\n            \r\n         }\r\n       function mouseout() {\r\n         \r\n         focus.style(\"opacity\", 0)\r\n         focusText.style(\"opacity\", 0)\r\n        \r\n       }\r\n\r\n\r\n   }, [data, dimensions, property]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}