{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\GeoChart.jsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { select, geoPath, geoMercator } from \"d3\";\nimport useResizeObserver from './useReziseObserver';\nimport '../../styles/header.css';\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const svg = select(svgRef.current); // const { width, height } =\n    //  dimensions || wrapperRef.current.getCoundingClientRect();\n    // Projiziert die Geo-Koordinaten in 2D\n\n    const projection = geoMercator(); //nimmt Geo-Daten als Input und übersetzt sie in d attributes eines path elements\n\n    const pathGenerator = geoPath().projection(projection);\n    svg.selectAll(\".country\").data({\n      data\n    }).join(\"path\").attr(\"class\", \"country\").attr(\"d\", feature => pathGenerator(feature));\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }));\n}\n\nexport default GeoChart;\nGeoChart.defaultProps = {\n  name: 'data'\n};","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/GeoChart.jsx"],"names":["React","useEffect","useRef","PropTypes","select","geoPath","geoMercator","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","svg","current","projection","pathGenerator","selectAll","join","attr","feature","marginBottom","defaultProps","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,QAA6C,IAA7C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAO,yBAAP;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,EAAqC;AACjC,QAAMC,MAAM,GAAGT,MAAM,EAArB;AACA,QAAMU,UAAU,GAAGV,MAAM,EAAzB;AACA,QAAMW,UAAU,GAAGN,iBAAiB,CAACK,UAAD,CAApC;AAEAX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,GAAG,GAAGV,MAAM,CAACO,MAAM,CAACI,OAAR,CAAlB,CADY,CAKb;AACG;AACE;;AACA,UAAMC,UAAU,GAAGV,WAAW,EAA9B,CARQ,CAUR;;AACA,UAAMW,aAAa,GAAGZ,OAAO,GAAGW,UAAV,CAAqBA,UAArB,CAAtB;AAEAF,IAAAA,GAAG,CACFI,SADD,CACW,UADX,EAECT,IAFD,CAEM;AAACA,MAAAA;AAAD,KAFN,EAGCU,IAHD,CAGM,MAHN,EAICC,IAJD,CAIM,OAJN,EAIe,SAJf,EAKCA,IALD,CAKM,GALN,EAKWC,OAAO,IAAIJ,aAAa,CAACI,OAAD,CALnC;AAOP,GApBQ,EAoBN,CAACZ,IAAD,EAAOI,UAAP,EAAmBH,QAAnB,CApBM,CAAT;AAsBA,SACI;AAAK,IAAA,GAAG,EAAEE,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEU,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAEX,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAOH;;AAED,eAAeH,QAAf;AAEAA,QAAQ,CAACe,YAAT,GAAwB;AACpBC,EAAAA,IAAI,EAAE;AADc,CAAxB","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { select, geoPath, geoMercator } from \"d3\";\r\nimport useResizeObserver from './useReziseObserver'\r\nimport '../../styles/header.css'\r\n\r\nfunction GeoChart({ data, property }){\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    \r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n\r\n\r\n\r\n       // const { width, height } =\r\n          //  dimensions || wrapperRef.current.getCoundingClientRect();\r\n            // Projiziert die Geo-Koordinaten in 2D\r\n            const projection = geoMercator();\r\n\r\n            //nimmt Geo-Daten als Input und übersetzt sie in d attributes eines path elements\r\n            const pathGenerator = geoPath().projection(projection);\r\n\r\n            svg\r\n            .selectAll(\".country\")\r\n            .data({data})\r\n            .join(\"path\")\r\n            .attr(\"class\", \"country\")\r\n            .attr(\"d\", feature => pathGenerator(feature));\r\n\r\n    }, [data, dimensions, property]);\r\n   \r\n    return (\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef}>\r\n            </svg>\r\n            </div>\r\n   );\r\n \r\n}\r\n\r\nexport default GeoChart;\r\n\r\nGeoChart.defaultProps = {\r\n    name: 'data'\r\n  };"]},"metadata":{},"sourceType":"module"}