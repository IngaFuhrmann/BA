{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React from \"react\";\nimport * as d3 from \"d3\";\nimport { connect } from \"react-redux\";\nimport { setCurrentBarRed } from \"../../actions\";\nimport { setCurrentBarBlue } from \"../../actions\";\nimport data from \"../../data.json\"; // Add function:\n\nfunction mapStateToProps(state) {\n  return {\n    color: state.color,\n    index: state.index,\n    key: state.key\n  };\n}\n\nclass BarChart extends React.Component {\n  componentDidMount() {\n    this.drawBarChart(data);\n  }\n\n  drawBarChart(data) {\n    const SVG_HEIGHT = 300;\n    const SVG_WIDTH = 300;\n    const MARGIN = {\n      TOP: 20,\n      BOTTOM: 50,\n      LEFT: 50,\n      RIGHT: 15\n    };\n    const GRAPH_WIDTH = SVG_WIDTH - MARGIN.LEFT - MARGIN.RIGHT;\n    const GRAPH_HEIGHT = SVG_HEIGHT - MARGIN.TOP - MARGIN.BOTTOM;\n    const SCALES = {\n      X_SCALE: d3.scaleBand().domain(data.map(d => d.region)).range([0, GRAPH_WIDTH]).paddingInner(0.2).paddingOuter(0.2),\n      Y_SCALE: d3.scaleLinear().domain([0, d3.max(data, function (d) {\n        return d.profit;\n      })]).range([GRAPH_HEIGHT, 0])\n    };\n    let xAxisCall = d3.axisBottom(SCALES.X_SCALE);\n    let yAxisCall = d3.axisLeft(SCALES.Y_SCALE);\n    const that = this; // Create the SVG graph\n\n    this.svgGroup = d3.select(this.refs.canvas).append(\"svg\").attr(\"width\", GRAPH_WIDTH + MARGIN.LEFT + MARGIN.RIGHT).attr(\"height\", GRAPH_HEIGHT + MARGIN.TOP + MARGIN.BOTTOM).append(\"g\").attr(\"transform\", \"translate(\" + MARGIN.LEFT + \", \" + MARGIN.TOP + \")\"); // Create The SVG Axis\n\n    this.svgGroup.append(\"g\").attr(\"class\", \"x axis\").attr(\"transform\", \"translate(0, \" + GRAPH_HEIGHT + \")\").call(xAxisCall).selectAll(\"text\").attr(\"y\", \"10\").attr(\"x\", \"10\").attr(\"text-anchor\", \"end\");\n    this.svgGroup.append(\"g\").attr(\"class\", \"y axis\").call(yAxisCall); // Create the SVG rects\n\n    this.svgGroup.selectAll(\"rect\").data(data).enter().append(\"rect\").attr(\"width\", SCALES.X_SCALE.bandwidth()).attr(\"height\", function (d) {\n      return GRAPH_HEIGHT - SCALES.Y_SCALE(d.profit);\n    }).attr(\"x\", function (d, i) {\n      return SCALES.X_SCALE(d.region);\n    }).attr(\"y\", function (d) {\n      return SCALES.Y_SCALE(d.profit);\n    }).attr(\"fill\", this.props.color).attr(\"stroke\", \"black\").attr(\"fill-opacity\", 0.6).on(\"click\", function (d, i, key) {\n      if (this.props.key === \"false\") {\n        that.props.dispatch(setCurrentBarRed(i));\n      }\n\n      if (this.props.key === \"true\") {\n        that.props.dispatch(setCurrentBarBlue(i));\n      } // that.handleClick(this);\n\n    });\n  }\n\n  componentDidUpdate() {\n    this.svgGroup.selectAll(\"rect\").filter((d, i, key) => i === this.props.index, this.props.key).attr(\"fill\", this.props.color);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default connect(mapStateToProps)(BarChart);\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","d3","connect","setCurrentBarRed","setCurrentBarBlue","data","mapStateToProps","state","color","index","key","BarChart","Component","componentDidMount","drawBarChart","SVG_HEIGHT","SVG_WIDTH","MARGIN","TOP","BOTTOM","LEFT","RIGHT","GRAPH_WIDTH","GRAPH_HEIGHT","SCALES","X_SCALE","scaleBand","domain","map","d","region","range","paddingInner","paddingOuter","Y_SCALE","scaleLinear","max","profit","xAxisCall","axisBottom","yAxisCall","axisLeft","that","svgGroup","select","refs","canvas","append","attr","call","selectAll","enter","bandwidth","i","props","on","dispatch","componentDidUpdate","filter","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,gBAAT,QAAiC,eAAjC;AACA,SAASC,iBAAT,QAAkC,eAAlC;AACA,OAAOC,IAAP,MAAiB,iBAAjB,C,CAEA;;AACA,SAASC,eAAT,CAAyBC,KAAzB,EAAgC;AAC9B,SAAO;AACLC,IAAAA,KAAK,EAAED,KAAK,CAACC,KADR;AAELC,IAAAA,KAAK,EAAEF,KAAK,CAACE,KAFR;AAGLC,IAAAA,GAAG,EAAEH,KAAK,CAACG;AAHN,GAAP;AAKD;;AAED,MAAMC,QAAN,SAAuBX,KAAK,CAACY,SAA7B,CAAuC;AACrCC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,YAAL,CAAkBT,IAAlB;AACD;;AACDS,EAAAA,YAAY,CAACT,IAAD,EAAQ;AAClB,UAAMU,UAAU,GAAG,GAAnB;AACA,UAAMC,SAAS,GAAG,GAAlB;AACA,UAAMC,MAAM,GAAG;AAAEC,MAAAA,GAAG,EAAE,EAAP;AAAWC,MAAAA,MAAM,EAAE,EAAnB;AAAuBC,MAAAA,IAAI,EAAE,EAA7B;AAAiCC,MAAAA,KAAK,EAAE;AAAxC,KAAf;AAEA,UAAMC,WAAW,GAAGN,SAAS,GAAGC,MAAM,CAACG,IAAnB,GAA0BH,MAAM,CAACI,KAArD;AACA,UAAME,YAAY,GAAGR,UAAU,GAAGE,MAAM,CAACC,GAApB,GAA0BD,MAAM,CAACE,MAAtD;AAEA,UAAMK,MAAM,GAAG;AACbC,MAAAA,OAAO,EAAExB,EAAE,CACRyB,SADM,GAENC,MAFM,CAECtB,IAAI,CAACuB,GAAL,CAASC,CAAC,IAAIA,CAAC,CAACC,MAAhB,CAFD,EAGNC,KAHM,CAGA,CAAC,CAAD,EAAIT,WAAJ,CAHA,EAINU,YAJM,CAIO,GAJP,EAKNC,YALM,CAKO,GALP,CADI;AAObC,MAAAA,OAAO,EAAEjC,EAAE,CACRkC,WADM,GAENR,MAFM,CAEC,CACN,CADM,EAEN1B,EAAE,CAACmC,GAAH,CAAO/B,IAAP,EAAa,UAASwB,CAAT,EAAY;AACvB,eAAOA,CAAC,CAACQ,MAAT;AACD,OAFD,CAFM,CAFD,EAQNN,KARM,CAQA,CAACR,YAAD,EAAe,CAAf,CARA;AAPI,KAAf;AAkBA,QAAIe,SAAS,GAAGrC,EAAE,CAACsC,UAAH,CAAcf,MAAM,CAACC,OAArB,CAAhB;AACA,QAAIe,SAAS,GAAGvC,EAAE,CAACwC,QAAH,CAAYjB,MAAM,CAACU,OAAnB,CAAhB;AACA,UAAMQ,IAAI,GAAG,IAAb,CA5BkB,CA8BlB;;AACA,SAAKC,QAAL,GAAgB1C,EAAE,CACf2C,MADa,CACN,KAAKC,IAAL,CAAUC,MADJ,EAEbC,MAFa,CAEN,KAFM,EAGbC,IAHa,CAGR,OAHQ,EAGC1B,WAAW,GAAGL,MAAM,CAACG,IAArB,GAA4BH,MAAM,CAACI,KAHpC,EAIb2B,IAJa,CAIR,QAJQ,EAIEzB,YAAY,GAAGN,MAAM,CAACC,GAAtB,GAA4BD,MAAM,CAACE,MAJrC,EAKb4B,MALa,CAKN,GALM,EAMbC,IANa,CAMR,WANQ,EAMK,eAAe/B,MAAM,CAACG,IAAtB,GAA6B,IAA7B,GAAoCH,MAAM,CAACC,GAA3C,GAAiD,GANtD,CAAhB,CA/BkB,CAuClB;;AACA,SAAKyB,QAAL,CACGI,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,QAFjB,EAGGA,IAHH,CAGQ,WAHR,EAGqB,kBAAkBzB,YAAlB,GAAiC,GAHtD,EAIG0B,IAJH,CAIQX,SAJR,EAKGY,SALH,CAKa,MALb,EAMGF,IANH,CAMQ,GANR,EAMa,IANb,EAOGA,IAPH,CAOQ,GAPR,EAOa,IAPb,EAQGA,IARH,CAQQ,aARR,EAQuB,KARvB;AASE,SAAKL,QAAL,CACCI,MADD,CACQ,GADR,EAECC,IAFD,CAEM,OAFN,EAEe,QAFf,EAGCC,IAHD,CAGMT,SAHN,EAjDgB,CAsDlB;;AACA,SAAKG,QAAL,CACGO,SADH,CACa,MADb,EAEG7C,IAFH,CAEQA,IAFR,EAGG8C,KAHH,GAIGJ,MAJH,CAIU,MAJV,EAKGC,IALH,CAKQ,OALR,EAKiBxB,MAAM,CAACC,OAAP,CAAe2B,SAAf,EALjB,EAMGJ,IANH,CAMQ,QANR,EAMkB,UAASnB,CAAT,EAAY;AAC1B,aAAON,YAAY,GAAGC,MAAM,CAACU,OAAP,CAAeL,CAAC,CAACQ,MAAjB,CAAtB;AACD,KARH,EASGW,IATH,CASQ,GATR,EASa,UAASnB,CAAT,EAAYwB,CAAZ,EAAe;AACxB,aAAO7B,MAAM,CAACC,OAAP,CAAeI,CAAC,CAACC,MAAjB,CAAP;AACD,KAXH,EAYGkB,IAZH,CAYQ,GAZR,EAYa,UAASnB,CAAT,EAAY;AACrB,aAAOL,MAAM,CAACU,OAAP,CAAeL,CAAC,CAACQ,MAAjB,CAAP;AACD,KAdH,EAeGW,IAfH,CAeQ,MAfR,EAegB,KAAKM,KAAL,CAAW9C,KAf3B,EAgBGwC,IAhBH,CAgBQ,QAhBR,EAgBkB,OAhBlB,EAiBGA,IAjBH,CAiBQ,cAjBR,EAiBwB,GAjBxB,EAkBGO,EAlBH,CAkBM,OAlBN,EAkBe,UAAS1B,CAAT,EAAYwB,CAAZ,EAAe3C,GAAf,EAAoB;AAE/B,UAAG,KAAK4C,KAAL,CAAW5C,GAAX,KAAmB,OAAtB,EAA+B;AAC/BgC,QAAAA,IAAI,CAACY,KAAL,CAAWE,QAAX,CAAoBrD,gBAAgB,CAACkD,CAAD,CAApC;AACC;;AACD,UAAG,KAAKC,KAAL,CAAW5C,GAAX,KAAmB,MAAtB,EAA8B;AAC5BgC,QAAAA,IAAI,CAACY,KAAL,CAAWE,QAAX,CAAoBpD,iBAAiB,CAACiD,CAAD,CAArC;AACD,OAP8B,CAQ/B;;AACD,KA3BH;AA4BD;;AAEDI,EAAAA,kBAAkB,GAAG;AACnB,SAAKd,QAAL,CACGO,SADH,CACa,MADb,EAEGQ,MAFH,CAEU,CAAC7B,CAAD,EAAIwB,CAAJ,EAAO3C,GAAP,KAAe2C,CAAC,KAAK,KAAKC,KAAL,CAAW7C,KAF1C,EAEiD,KAAK6C,KAAL,CAAW5C,GAF5D,EAGGsC,IAHH,CAGQ,MAHR,EAGgB,KAAKM,KAAL,CAAW9C,KAH3B;AAID;;AAGDmD,EAAAA,MAAM,GACL;AAAE,WAAO;AAAK,MAAA,GAAG,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAAiC;;AAlGC;;AAoGvC,eAAezD,OAAO,CAACI,eAAD,CAAP,CAAyBK,QAAzB,CAAf;AAGA","sourcesContent":["import React from \"react\";\r\nimport * as d3 from \"d3\";\r\nimport { connect } from \"react-redux\";\r\nimport { setCurrentBarRed } from \"../../actions\";\r\nimport { setCurrentBarBlue } from \"../../actions\";\r\nimport data from \"../../data.json\";\r\n\r\n// Add function:\r\nfunction mapStateToProps(state) {\r\n  return {\r\n    color: state.color,\r\n    index: state.index,\r\n    key: state.key\r\n  };\r\n}\r\n\r\nclass BarChart extends React.Component {\r\n  componentDidMount() {\r\n    this.drawBarChart(data);\r\n  }\r\n  drawBarChart(data)  {\r\n    const SVG_HEIGHT = 300;\r\n    const SVG_WIDTH = 300;\r\n    const MARGIN = { TOP: 20, BOTTOM: 50, LEFT: 50, RIGHT: 15 };\r\n\r\n    const GRAPH_WIDTH = SVG_WIDTH - MARGIN.LEFT - MARGIN.RIGHT;\r\n    const GRAPH_HEIGHT = SVG_HEIGHT - MARGIN.TOP - MARGIN.BOTTOM;\r\n\r\n    const SCALES = {\r\n      X_SCALE: d3\r\n        .scaleBand()\r\n        .domain(data.map(d => d.region))\r\n        .range([0, GRAPH_WIDTH])\r\n        .paddingInner(0.2)\r\n        .paddingOuter(0.2),\r\n      Y_SCALE: d3\r\n        .scaleLinear()\r\n        .domain([\r\n          0,\r\n          d3.max(data, function(d) {\r\n            return d.profit;\r\n          })\r\n        ])\r\n        .range([GRAPH_HEIGHT, 0])\r\n    };\r\n\r\n    let xAxisCall = d3.axisBottom(SCALES.X_SCALE);\r\n    let yAxisCall = d3.axisLeft(SCALES.Y_SCALE);\r\n    const that = this;\r\n\r\n    // Create the SVG graph\r\n    this.svgGroup = d3\r\n      .select(this.refs.canvas)\r\n      .append(\"svg\")\r\n      .attr(\"width\", GRAPH_WIDTH + MARGIN.LEFT + MARGIN.RIGHT)\r\n      .attr(\"height\", GRAPH_HEIGHT + MARGIN.TOP + MARGIN.BOTTOM)\r\n      .append(\"g\")\r\n      .attr(\"transform\", \"translate(\" + MARGIN.LEFT + \", \" + MARGIN.TOP + \")\");\r\n\r\n    // Create The SVG Axis\r\n    this.svgGroup\r\n      .append(\"g\")\r\n      .attr(\"class\", \"x axis\")\r\n      .attr(\"transform\", \"translate(0, \" + GRAPH_HEIGHT + \")\")\r\n      .call(xAxisCall)\r\n      .selectAll(\"text\")\r\n      .attr(\"y\", \"10\")\r\n      .attr(\"x\", \"10\")\r\n      .attr(\"text-anchor\", \"end\");\r\n      this.svgGroup\r\n      .append(\"g\")\r\n      .attr(\"class\", \"y axis\")\r\n      .call(yAxisCall);\r\n\r\n    // Create the SVG rects\r\n    this.svgGroup\r\n      .selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"width\", SCALES.X_SCALE.bandwidth())\r\n      .attr(\"height\", function(d) {\r\n        return GRAPH_HEIGHT - SCALES.Y_SCALE(d.profit);\r\n      })\r\n      .attr(\"x\", function(d, i) {\r\n        return SCALES.X_SCALE(d.region);\r\n      })\r\n      .attr(\"y\", function(d) {\r\n        return SCALES.Y_SCALE(d.profit);\r\n      })\r\n      .attr(\"fill\", this.props.color)\r\n      .attr(\"stroke\", \"black\")\r\n      .attr(\"fill-opacity\", 0.6)\r\n      .on(\"click\", function(d, i, key) {\r\n        \r\n        if(this.props.key === \"false\") {\r\n        that.props.dispatch(setCurrentBarRed(i));\r\n        }\r\n        if(this.props.key === \"true\") {\r\n          that.props.dispatch(setCurrentBarBlue(i));\r\n        }\r\n        // that.handleClick(this);\r\n      });\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    this.svgGroup\r\n      .selectAll(\"rect\")\r\n      .filter((d, i, key) => i === this.props.index, this.props.key)\r\n      .attr(\"fill\", this.props.color);\r\n  }\r\n\r\n\r\n  render()\r\n   { return <div ref=\"canvas\"></div> }\r\n}\r\nexport default connect(mapStateToProps)(BarChart);\r\n\r\n\r\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */"]},"metadata":{},"sourceType":"module"}