{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\nimport { csvParse } from 'd3-dsv';\n\nclass BarChart extends Component {\n  componentDidMount() {\n    const data = [2, 4, 2, 6, 8];\n    this.drawBarChart(data);\n  }\n\n  drawBarChart(data) {\n    const canvasHeight = 400;\n    const canvasWidth = 600;\n    const scale = 20;\n    const svgCanvas = d3.select(this.refs.canvas).append('svg').attr('width', canvasWidth).attr('height', canvasHeight).style('border', '1px solid black');\n    svgCanvas.selectAll('rect').data(data).enter().append('rect').attr('width', 40).attr('height', datapoint => datapoint * scale).attr('fill', 'orange').attr('x', (datapoint, iteration) => iteration * 45).attr('y', datapoint => canvasHeight - datapoint * scale);\n    svgCanvas.selectAll('text').data(data).enter().append('text').attr('x', (dataPoint, i) => i * 45 + 10).attr('y', (dataPoint, i) => canvasHeight - dataPoint * scale - 10).text(dataPoint => dataPoint);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default BarChart;\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","scaleOrdinal","arc","d3Arc","pie","d3Pie","csvParse","BarChart","Component","componentDidMount","data","drawBarChart","canvasHeight","canvasWidth","scale","svgCanvas","d3","select","refs","canvas","append","attr","style","selectAll","enter","datapoint","iteration","dataPoint","i","text","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,GAAG,IAAIC,KAAhB,EAAuBC,GAAG,IAAIC,KAA9B,QAA2C,UAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;;AAEA,MAAMC,QAAN,SAAuBC,SAAvB,CAAiC;AAC/BC,EAAAA,iBAAiB,GAAG;AAChB,UAAMC,IAAI,GAAG,CAAE,CAAF,EAAK,CAAL,EAAQ,CAAR,EAAW,CAAX,EAAc,CAAd,CAAb;AACA,SAAKC,YAAL,CAAkBD,IAAlB;AACH;;AACDC,EAAAA,YAAY,CAACD,IAAD,EAAQ;AAChB,UAAME,YAAY,GAAG,GAArB;AACA,UAAMC,WAAW,GAAG,GAApB;AACA,UAAMC,KAAK,GAAG,EAAd;AACA,UAAMC,SAAS,GAAGC,EAAE,CAACC,MAAH,CAAU,KAAKC,IAAL,CAAUC,MAApB,EACbC,MADa,CACN,KADM,EAEbC,IAFa,CAER,OAFQ,EAECR,WAFD,EAGbQ,IAHa,CAGR,QAHQ,EAGET,YAHF,EAIbU,KAJa,CAIP,QAJO,EAIG,iBAJH,CAAlB;AAMAP,IAAAA,SAAS,CAACQ,SAAV,CAAoB,MAApB,EACKb,IADL,CACUA,IADV,EACgBc,KADhB,GAESJ,MAFT,CAEgB,MAFhB,EAGSC,IAHT,CAGc,OAHd,EAGuB,EAHvB,EAISA,IAJT,CAIc,QAJd,EAIyBI,SAAD,IAAeA,SAAS,GAAGX,KAJnD,EAKSO,IALT,CAKc,MALd,EAKsB,QALtB,EAMSA,IANT,CAMc,GANd,EAMmB,CAACI,SAAD,EAAYC,SAAZ,KAA0BA,SAAS,GAAG,EANzD,EAOSL,IAPT,CAOc,GAPd,EAOoBI,SAAD,IAAeb,YAAY,GAAGa,SAAS,GAAGX,KAP7D;AASQC,IAAAA,SAAS,CAACQ,SAAV,CAAoB,MAApB,EACCb,IADD,CACMA,IADN,EACYc,KADZ,GAEKJ,MAFL,CAEY,MAFZ,EAGKC,IAHL,CAGU,GAHV,EAGe,CAACM,SAAD,EAAYC,CAAZ,KAAkBA,CAAC,GAAG,EAAJ,GAAS,EAH1C,EAIKP,IAJL,CAIU,GAJV,EAIe,CAACM,SAAD,EAAYC,CAAZ,KAAkBhB,YAAY,GAAGe,SAAS,GAAGb,KAA3B,GAAmC,EAJpE,EAKKe,IALL,CAKUF,SAAS,IAAIA,SALvB;AAMX;;AACDG,EAAAA,MAAM,GACL;AAAE,WAAO;AAAK,MAAA,GAAG,EAAC,QAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AAAiC;;AAhCL;;AAkCjC,eAAevB,QAAf;AAGA","sourcesContent":["import React from 'react';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\r\nimport { csvParse } from 'd3-dsv';\r\n\r\nclass BarChart extends Component {\r\n  componentDidMount() {\r\n      const data = [ 2, 4, 2, 6, 8 ]\r\n      this.drawBarChart(data)\r\n  }\r\n  drawBarChart(data)  {\r\n      const canvasHeight = 400\r\n      const canvasWidth = 600\r\n      const scale = 20\r\n      const svgCanvas = d3.select(this.refs.canvas)\r\n          .append('svg')\r\n          .attr('width', canvasWidth)\r\n          .attr('height', canvasHeight)\r\n          .style('border', '1px solid black')\r\n\r\n      svgCanvas.selectAll('rect')\r\n          .data(data).enter()\r\n              .append('rect')\r\n              .attr('width', 40)\r\n              .attr('height', (datapoint) => datapoint * scale)\r\n              .attr('fill', 'orange')\r\n              .attr('x', (datapoint, iteration) => iteration * 45)\r\n              .attr('y', (datapoint) => canvasHeight - datapoint * scale)\r\n\r\n              svgCanvas.selectAll('text')\r\n              .data(data).enter()\r\n                  .append('text')\r\n                  .attr('x', (dataPoint, i) => i * 45 + 10)\r\n                  .attr('y', (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\r\n                  .text(dataPoint => dataPoint)\r\n  }\r\n  render()\r\n   { return <div ref=\"canvas\"></div> }\r\n}\r\nexport default BarChart;\r\n\r\n\r\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */"]},"metadata":{},"sourceType":"module"}