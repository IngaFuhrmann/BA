{"ast":null,"code":"import { axisLeft, axisBottom, format, timeFormat, scaleTime, scaleLinear } from 'd3';\nimport { select } from 'd3';\n/**\r\n * create x- and y-scales\r\n */\n\nconst xScale = scaleTime().domain([dateUtils.getStartOfMonth(new Date()), new Date()]).range([0, d3Config.maxChartWidth]);\nconst yScale = scaleLinear().domain([0, d3Config.defaultMaxYValue]).range([d3Config.maxChartHeight, 0]);\n/**\r\n * scale data points according to their respective domain/range configuration\r\n */\n\nconst scaleXData = point => {\n  return xScale(new Date(point.timestamp));\n};\n\nconst scaleYData = point => {\n  return yScale(point.value);\n};\n/**\r\n * create x- and y-axes\r\n */\n\n\nconst yAxis = axisLeft(yScale).ticks(5).tickFormat(format(d3Config.numberFormat));\nconst xAxis = axisBottom(xScale).ticks(5).tickFormat(timeFormat(d3Config.dateFormat));\n/**\r\n* build the elements that will be contained within our main SVG\r\n*/\n\nconst buildAxes = () => {\n  select('.line-chart').append('g').attr('class', 'line-chart-yaxis');\n  select('.line-chart').append('g').attr('class', 'line-chart-xaxis');\n};\n\nconst buildLine = () => {\n  select('.line-chart').append('path').attr('class', 'line-chart-line');\n};","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/utils.js"],"names":["axisLeft","axisBottom","format","timeFormat","scaleTime","scaleLinear","select","xScale","domain","dateUtils","getStartOfMonth","Date","range","d3Config","maxChartWidth","yScale","defaultMaxYValue","maxChartHeight","scaleXData","point","timestamp","scaleYData","value","yAxis","ticks","tickFormat","numberFormat","xAxis","dateFormat","buildAxes","append","attr","buildLine"],"mappings":"AAAA,SACIA,QADJ,EAEIC,UAFJ,EAGIC,MAHJ,EAIIC,UAJJ,EAKIC,SALJ,EAMIC,WANJ,QAOS,IAPT;AAQE,SAASC,MAAT,QAAuB,IAAvB;AACA;;;;AAGA,MAAMC,MAAM,GACVH,SAAS,GACNI,MADH,CACU,CAACC,SAAS,CAACC,eAAV,CAA0B,IAAIC,IAAJ,EAA1B,CAAD,EAAwC,IAAIA,IAAJ,EAAxC,CADV,EAEGC,KAFH,CAES,CAAC,CAAD,EAAIC,QAAQ,CAACC,aAAb,CAFT,CADF;AAKA,MAAMC,MAAM,GACVV,WAAW,GACRG,MADH,CACU,CAAC,CAAD,EAAIK,QAAQ,CAACG,gBAAb,CADV,EAEGJ,KAFH,CAES,CAACC,QAAQ,CAACI,cAAV,EAA0B,CAA1B,CAFT,CADF;AAKA;;;;AAGA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAC5B,SAAOZ,MAAM,CAAC,IAAII,IAAJ,CAASQ,KAAK,CAACC,SAAf,CAAD,CAAb;AACD,CAFD;;AAIA,MAAMC,UAAU,GAAIF,KAAD,IAAW;AAC5B,SAAOJ,MAAM,CAACI,KAAK,CAACG,KAAP,CAAb;AACD,CAFD;AAIA;;;;;AAGA,MAAMC,KAAK,GACTvB,QAAQ,CAACe,MAAD,CAAR,CACGS,KADH,CACS,CADT,EAEGC,UAFH,CAEcvB,MAAM,CAACW,QAAQ,CAACa,YAAV,CAFpB,CADF;AAKA,MAAMC,KAAK,GACT1B,UAAU,CAACM,MAAD,CAAV,CACGiB,KADH,CACS,CADT,EAEGC,UAFH,CAEctB,UAAU,CAACU,QAAQ,CAACe,UAAV,CAFxB,CADF;AAKI;;;;AAGN,MAAMC,SAAS,GAAG,MAAM;AACpBvB,EAAAA,MAAM,CAAC,aAAD,CAAN,CACGwB,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,kBAFjB;AAIAzB,EAAAA,MAAM,CAAC,aAAD,CAAN,CACGwB,MADH,CACU,GADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,kBAFjB;AAGD,CARH;;AAUE,MAAMC,SAAS,GAAG,MAAM;AACtB1B,EAAAA,MAAM,CAAC,aAAD,CAAN,CACGwB,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,OAFR,EAEiB,iBAFjB;AAGD,CAJD","sourcesContent":["import {\r\n    axisLeft,\r\n    axisBottom,\r\n    format,\r\n    timeFormat,\r\n    scaleTime,\r\n    scaleLinear,\r\n  } from 'd3';\r\n  import { select } from 'd3';\r\n  /**\r\n   * create x- and y-scales\r\n   */\r\n  const xScale =\r\n    scaleTime()\r\n      .domain([dateUtils.getStartOfMonth(new Date()), new Date()])\r\n      .range([0, d3Config.maxChartWidth]);\r\n  \r\n  const yScale =\r\n    scaleLinear()\r\n      .domain([0, d3Config.defaultMaxYValue])\r\n      .range([d3Config.maxChartHeight, 0]);\r\n  \r\n  /**\r\n   * scale data points according to their respective domain/range configuration\r\n   */\r\n  const scaleXData = (point) => {\r\n    return xScale(new Date(point.timestamp));\r\n  }\r\n  \r\n  const scaleYData = (point) => {\r\n    return yScale(point.value);\r\n  }\r\n  \r\n  /**\r\n   * create x- and y-axes\r\n   */\r\n  const yAxis =\r\n    axisLeft(yScale)\r\n      .ticks(5)\r\n      .tickFormat(format(d3Config.numberFormat));\r\n  \r\n  const xAxis =\r\n    axisBottom(xScale)\r\n      .ticks(5)\r\n      .tickFormat(timeFormat(d3Config.dateFormat));\r\n\r\n      /**\r\n * build the elements that will be contained within our main SVG\r\n */\r\nconst buildAxes = () => {\r\n    select('.line-chart')\r\n      .append('g')\r\n      .attr('class', 'line-chart-yaxis');\r\n  \r\n    select('.line-chart')\r\n      .append('g')\r\n      .attr('class', 'line-chart-xaxis')\r\n  };\r\n  \r\n  const buildLine = () => {\r\n    select('.line-chart')\r\n      .append('path')\r\n      .attr('class', 'line-chart-line')\r\n  };"]},"metadata":{},"sourceType":"module"}