{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\nimport '../../styles/charts.css'; //dynamische Daten\n\nfunction LineCharts() {\n  const _useState = useState([25, 30, 45, 60, 20, 65, 75]),\n        _useState2 = _slicedToArray(_useState, 2),\n        data = _useState2[0],\n        setData = _useState2[1];\n\n  const svgRef = useRef(); //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    var type = d3.scaleOrdinal().domain(['WeWork', 'Regus']).range(['red', 'blue']).unknown(\"blue\");\n    const xScale = scaleBand().domain([0, 1, 2, 3, 4, 5, 6]) //0 zu 0 ; 6 zu 200\n    .range([0, 1000]).padding(0.5);\n    const yScale = scaleLinear().domain([10, 100]).range([500, 0]);\n    const colorScale = scaleLinear().domain([75, 100, 100]).range([\"green\", \"orange\", \"red\"]).clamp(true);\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', 'translateX(0px)').call(yAxis);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    /**  svg\r\n     .selectAll('circle')\r\n     .data(data)\r\n     .join('circle')\r\n     .attr(\"r\", value => value)\r\n     .attr('cx', value => value * 2)\r\n     .attr(\"cy\", value => value * 2)\r\n     .attr(\"stroke\", 'red');*/\n\n    svg.selectAll(\".bar\").data(data).join(\"rect\").attr(\"class\", \"bar\").style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\n    .attr(\"x\", (value, index) => xScale(index)).attr(\"y\", -500) //Animation: nach unten, weil die Bars gedreht wurden\n    .attr(\"width\", xScale.bandwidth()).on(\"mouseenter\", (value, index) => {\n      svg //Tooltip\n      .selectAll(\".tooltip\").data([value]).join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4)).attr(\"class\", \"tooltip\").text(value).attr(\"x\", xScale(index) + xScale.bandwidth() / 2).attr(\"text-anchor\", \"middle\").transition().attr(\"y\", yScale(value) - 8).attr(\"opacity\", 1);\n    }).on(\"mouseleave\", () => svg.select(\".tooltip\").remove()).transition().attr(\"fill\", colorScale).attr(\"height\", value => 500 - yScale(value));\n  }, [data]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    width: \"1000\",\n    height: \"500\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  })), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => setData(data.map(value => value + 5)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, \"Update data\"), React.createElement(\"button\", {\n    onClick: () => setData(data.filter(value => value < 35)),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Filter data\"));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","axisBottom","axisLeft","scaleLinear","scaleBand","LineCharts","data","setData","svgRef","svg","current","type","d3","scaleOrdinal","domain","range","unknown","xScale","padding","yScale","colorScale","clamp","yAxis","style","call","xAxis","ticks","length","selectAll","join","attr","value","index","bandwidth","on","enter","append","text","transition","remove","map","filter"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\r\nimport '../../styles/charts.css'\r\n\r\n//dynamische Daten\r\n\r\nfunction LineCharts() {\r\n   const [data, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   const svgRef = useRef();\r\n   \r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n\r\n      var type = d3.scaleOrdinal()\r\n        .domain(['WeWork', 'Regus'])\r\n        .range(['red', 'blue'])\r\n        .unknown(\"blue\");\r\n\r\n      const xScale = scaleBand()\r\n         .domain([0, 1, 2, 3, 4, 5, 6]) //0 zu 0 ; 6 zu 200\r\n         .range([0, 1000])\r\n         .padding(0.5);\r\n\r\n      const yScale =  scaleLinear()\r\n         .domain([10, 100])\r\n         .range([500, 0]);  \r\n\r\n      \r\n         const colorScale =  scaleLinear()\r\n         .domain([75, 100, 100])\r\n         .range([\"green\", \"orange\", \"red\"])\r\n         .clamp(true);  \r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', 'translateX(0px)')\r\n         .call(yAxis);\r\n\r\n     const xAxis = axisBottom(xScale).ticks(data.length);\r\n     /**  svg\r\n      .selectAll('circle')\r\n      .data(data)\r\n      .join('circle')\r\n      .attr(\"r\", value => value)\r\n      .attr('cx', value => value * 2)\r\n      .attr(\"cy\", value => value * 2)\r\n      .attr(\"stroke\", 'red');*/\r\n    svg\r\n    .selectAll(\".bar\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n    .attr(\"class\", \"bar\")\r\n    .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n    .attr(\"x\", (value, index) => xScale(index))\r\n    .attr(\"y\", -500) //Animation: nach unten, weil die Bars gedreht wurden\r\n    .attr(\"width\", xScale.bandwidth())\r\n    .on(\"mouseenter\", (value, index) => {\r\n       svg //Tooltip\r\n       .selectAll(\".tooltip\")\r\n       .data([value])\r\n       .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n       .attr(\"class\", \"tooltip\")\r\n       .text(value)\r\n       .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n       \r\n       .attr(\"text-anchor\", \"middle\")\r\n       .transition()\r\n       .attr(\"y\", yScale(value) - 8)\r\n       .attr(\"opacity\", 1);\r\n    })\r\n    .on(\"mouseleave\", () => \r\n    svg\r\n    .select(\".tooltip\").remove())\r\n    .transition()\r\n    .attr(\"fill\", colorScale)\r\n    .attr(\"height\", value =>500 - yScale(value))\r\n   }, [data]);\r\n   return <React.Fragment>\r\n            <svg ref={svgRef} width=\"1000\" height=\"500\">\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            <br/>\r\n            <br/>\r\n            <br/>\r\n            <button onClick={() => setData(data.map(value => value + 5))}>\r\n              Update data\r\n            </button>\r\n            <button onClick={() => setData(data.filter(value => value < 35))}>\r\n              Filter data\r\n            </button>\r\n            \r\n         </React.Fragment>\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}