{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport * as React from 'react';\nimport * as d3 from \"d3\";\nimport { scaleLinear } from 'd3-scale';\nimport { connect } from \"react-redux\";\nimport data from \"../../data.json\"; // Add function:\n\nexport default function BarChart() {\n  // set the dimensions and margins of the graph\n  var margin = {\n    top: 10,\n    right: 30,\n    bottom: 30,\n    left: 60\n  },\n      width = 460 - margin.left - margin.right,\n      height = 400 - margin.top - margin.bottom; // append the svg object to the body of the page\n\n  var svg = d3.select(\"#my_dataviz\").append(\"svg\").attr(\"width\", width + margin.left + margin.right).attr(\"height\", height + margin.top + margin.bottom).append(\"g\").attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\"); //Read the data\n\n  d3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\", // When reading the csv, I must format variables:\n  function (d) {\n    return {\n      date: d3.timeParse(\"%Y-%m-%d\")(d.date),\n      value: d.value\n    };\n  }, // Now I can use this dataset:\n  function (data) {\n    // Add X axis --> it is a date format\n    var x = d3.scaleTime().domain(d3.extent(data, function (d) {\n      return d.date;\n    })).range([0, width]);\n    svg.append(\"g\").attr(\"transform\", \"translate(0,\" + height + \")\").call(d3.axisBottom(x)); // Add Y axis\n\n    var y = d3.scaleLinear().domain([0, d3.max(data, function (d) {\n      return +d.value;\n    })]).range([height, 0]);\n    svg.append(\"g\").call(d3.axisLeft(y)); // Add the line\n\n    svg.append(\"path\").datum(data).attr(\"fill\", \"none\").attr(\"stroke\", \"steelblue\").attr(\"stroke-width\", 1.5).attr(\"d\", d3.line().x(function (d) {\n      return x(d.date);\n    }).y(function (d) {\n      return y(d.value);\n    }));\n  });\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, data.map((d, i) => React.createElement(\"rect\", {\n    key: i,\n    x: i * barWidth,\n    y: yScale(d),\n    width: barWidth - 1,\n    height: height - yScale(d),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  })));\n}\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","d3","scaleLinear","connect","data","BarChart","margin","top","right","bottom","left","width","height","svg","select","append","attr","csv","d","date","timeParse","value","x","scaleTime","domain","extent","range","call","axisBottom","y","max","axisLeft","datum","line","map","i","barWidth","yScale"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport * as d3 from \"d3\";\r\nimport { scaleLinear } from 'd3-scale';\r\nimport { connect } from \"react-redux\";\r\n\r\nimport data from \"../../data.json\";\r\n\r\n// Add function:\r\n  \r\n  \r\n  export default function BarChart() {\r\n    // set the dimensions and margins of the graph\r\nvar margin = {top: 10, right: 30, bottom: 30, left: 60},\r\nwidth = 460 - margin.left - margin.right,\r\nheight = 400 - margin.top - margin.bottom;\r\n\r\n// append the svg object to the body of the page\r\nvar svg = d3.select(\"#my_dataviz\")\r\n.append(\"svg\")\r\n.attr(\"width\", width + margin.left + margin.right)\r\n.attr(\"height\", height + margin.top + margin.bottom)\r\n.append(\"g\")\r\n.attr(\"transform\",\r\n      \"translate(\" + margin.left + \",\" + margin.top + \")\");\r\n\r\n//Read the data\r\nd3.csv(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/3_TwoNumOrdered_comma.csv\",\r\n\r\n// When reading the csv, I must format variables:\r\nfunction(d){\r\nreturn { date : d3.timeParse(\"%Y-%m-%d\")(d.date), value : d.value }\r\n},\r\n\r\n// Now I can use this dataset:\r\nfunction(data) {\r\n\r\n// Add X axis --> it is a date format\r\nvar x = d3.scaleTime()\r\n  .domain(d3.extent(data, function(d) { return d.date; }))\r\n  .range([ 0, width ]);\r\nsvg.append(\"g\")\r\n  .attr(\"transform\", \"translate(0,\" + height + \")\")\r\n  .call(d3.axisBottom(x));\r\n\r\n// Add Y axis\r\nvar y = d3.scaleLinear()\r\n  .domain([0, d3.max(data, function(d) { return +d.value; })])\r\n  .range([ height, 0 ]);\r\nsvg.append(\"g\")\r\n  .call(d3.axisLeft(y));\r\n\r\n// Add the line\r\nsvg.append(\"path\")\r\n  .datum(data)\r\n  .attr(\"fill\", \"none\")\r\n  .attr(\"stroke\", \"steelblue\")\r\n  .attr(\"stroke-width\", 1.5)\r\n  .attr(\"d\", d3.line()\r\n    .x(function(d) { return x(d.date) })\r\n    .y(function(d) { return y(d.value) })\r\n    )\r\n\r\n})\r\n\r\n  \r\n    return (\r\n      <svg width={width} height={height}>\r\n        {data.map((d, i) =>\r\n          <rect\r\n            key={i}\r\n            x={i * barWidth}\r\n            y={yScale(d)}\r\n            width={barWidth - 1}\r\n            height={height - yScale(d)}\r\n          />,\r\n        )}\r\n      </svg>\r\n    );\r\n  }\r\n\r\n\r\n\r\n\r\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */"]},"metadata":{},"sourceType":"module"}