{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\nimport '../../styles/charts.css';\n\nconst useResizeObserver = ref => {\n  //Beobachtet die Größe des Browsers\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nfunction LineCharts({\n  data\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    console.log(dimensions);\n    if (!dimensions) return;\n    const xScale = scaleBand().domain(data.map((value, index) => index)) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]) //change\n    .padding(0.5);\n    const yScale = scaleLinear().domain([10, 100]) //todo\n    .range([dimensions.height, 0]); //change\n\n    const colorScale = scaleLinear().domain([75, 100, 100]).range([\"green\", \"orange\", \"red\"]).clamp(true);\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', 'translateY({dimensions.height}px)').call(yAxis);\n    const xAxis = axisBottom(xScale).ticks(data.length);\n    /**  svg\r\n     .selectAll('circle')\r\n     .data(data)\r\n     .join('circle')\r\n     .attr(\"r\", value => value)\r\n     .attr('cx', value => value * 2)\r\n     .attr(\"cy\", value => value * 2)\r\n     .attr(\"stroke\", 'red');*/\n\n    svg.selectAll(\".bar\").data(data).join(\"rect\").attr(\"class\", \"bar\").style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\n    .attr(\"x\", (value, index) => xScale(index)).attr(\"y\", -500) //Animation: nach unten, weil die Bars gedreht wurden\n    .attr(\"width\", xScale.bandwidth()).on(\"mouseenter\", (value, index) => {\n      svg //Tooltip\n      .selectAll(\".tooltip\").data([value]).join(enter => enter.append(\"text\").attr(\"y\", yScale(value) - 4)).attr(\"class\", \"tooltip\").text(value).attr(\"x\", xScale(index) + xScale.bandwidth() / 2).attr(\"text-anchor\", \"middle\").transition().attr(\"y\", yScale(value) - 8).attr(\"opacity\", 1);\n    }).on(\"mouseleave\", () => svg.select(\".tooltip\").remove()).transition().attr(\"fill\", colorScale).attr(\"height\", value => 500 - yScale(value));\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","axisBottom","axisLeft","scaleLinear","scaleBand","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","ResizeObserver","entries","forEach","entry","contentRect","observe","unobserve","LineCharts","data","svgRef","wrapperRef","svg","console","log","xScale","domain","map","value","index","range","width","padding","yScale","height","colorScale","clamp","yAxis","style","call","xAxis","ticks","length","selectAll","join","attr","bandwidth","on","enter","append","text","transition","remove"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, axisBottom, axisLeft, scaleLinear, scaleBand } from 'd3';\r\nimport '../../styles/charts.css'\r\n\r\nconst useResizeObserver = ref => { //Beobachtet die Größe des Browsers\r\n   const [dimensions, setDimensions] = useState(null);\r\n   useEffect(() => {\r\n     const observeTarget = ref.current;\r\n     const resizeObserver = new ResizeObserver(entries => {\r\n       entries.forEach(entry => {\r\n         setDimensions(entry.contentRect);\r\n       });\r\n     });\r\n     resizeObserver.observe(observeTarget);\r\n     return () => {\r\n       resizeObserver.unobserve(observeTarget);\r\n     };\r\n   }, [ref]);\r\n   return dimensions;\r\n };\r\n\r\n\r\nfunction LineCharts({ data }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n         console.log(dimensions);\r\n\r\n         if(!dimensions) return;\r\n      \r\n      const xScale = scaleBand()\r\n         .domain(data.map((value, index) => index)) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n         .padding(0.5);\r\n\r\n      const yScale =  scaleLinear()\r\n         .domain([10, 100])   //todo\r\n         .range([dimensions.height, 0]);  //change\r\n\r\n      \r\n         const colorScale =  scaleLinear()\r\n         .domain([75, 100, 100])\r\n         .range([\"green\", \"orange\", \"red\"])\r\n         .clamp(true);  \r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', 'translateY({dimensions.height}px)')\r\n         .call(yAxis);\r\n\r\n     const xAxis = axisBottom(xScale).ticks(data.length);\r\n     /**  svg\r\n      .selectAll('circle')\r\n      .data(data)\r\n      .join('circle')\r\n      .attr(\"r\", value => value)\r\n      .attr('cx', value => value * 2)\r\n      .attr(\"cy\", value => value * 2)\r\n      .attr(\"stroke\", 'red');*/\r\n    svg\r\n    .selectAll(\".bar\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n    .attr(\"class\", \"bar\")\r\n    .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n    .attr(\"x\", (value, index) => xScale(index))\r\n    .attr(\"y\", -500) //Animation: nach unten, weil die Bars gedreht wurden\r\n    .attr(\"width\", xScale.bandwidth())\r\n    .on(\"mouseenter\", (value, index) => {\r\n       svg //Tooltip\r\n       .selectAll(\".tooltip\")\r\n       .data([value])\r\n       .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n       .attr(\"class\", \"tooltip\")\r\n       .text(value)\r\n       .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n       \r\n       .attr(\"text-anchor\", \"middle\")\r\n       .transition()\r\n       .attr(\"y\", yScale(value) - 8)\r\n       .attr(\"opacity\", 1);\r\n    })\r\n    .on(\"mouseleave\", () => \r\n    svg\r\n    .select(\".tooltip\").remove())\r\n    .transition()\r\n    .attr(\"fill\", colorScale)\r\n    .attr(\"height\", value =>500 - yScale(value))\r\n   }, [data, dimensions]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}