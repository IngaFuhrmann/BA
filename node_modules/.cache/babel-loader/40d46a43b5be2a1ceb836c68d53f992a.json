{"ast":null,"code":"import React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks } from 'd3';\nimport '../../styles/charts.css';\n\nfunction ChartVorlage({\n  svg,\n  minDate,\n  maxDate,\n  dimensions\n}) {\n  const xScale = scaleTime().domain([minDate, maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n  .range([0, dimensions.width]); //change\n\n  const yScale = scaleLinear().domain([0, 100]) //todo\n  .range([dimensions.height, 30]); //change\n\n  const yAxis = axisLeft(yScale);\n  svg.select('.y-axis').style('color', 'grey').style('font-size', '14').call(yAxis); //X-Achsen-Beschriftung\n\n  svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"fill\", \"grey\").attr(\"x\", dimensions.width).attr(\"y\", dimensions.height + 50).text(\"Jahr\");\n  const xAxis = axisBottom(xScale);\n  svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).style('color', 'grey').style('font-size', '14').style('stroke-width', 1).call(xAxis); //Grids\n\n  var grids = svg.append(\"g\").attr(\"class\", \"grid\").attr('transform', 'translate(50,50').call(axisLeft(yScale).tickSize(-dimensions.width).tickFormat(\"\")); //Y-Achsen-Beschrifzung\n\n  svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"grey\").attr(\"y\", -50).attr(\"x\", 0).text(\"Prozent\");\n}\n\nexport default ChartVorlage;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/ChartVorlage.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","ChartVorlage","svg","minDate","maxDate","dimensions","xScale","domain","range","width","yScale","height","yAxis","style","call","append","attr","text","xAxis","grids","tickSize","tickFormat"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DC,SAA5D,EAAuEC,WAAvE,EAAoFC,SAApF,EAA+FC,GAA/F,EAAoGC,GAApG,EAAyGC,KAAzG,EAAgHC,QAAhH,EAA0HC,KAA1H,EAAiIC,KAAjI,QAA6I,IAA7I;AACA,OAAO,yBAAP;;AAEA,SAASC,YAAT,CAAsB;AAAEC,EAAAA,GAAF;AAAOC,EAAAA,OAAP;AAAgBC,EAAAA,OAAhB;AAAyBC,EAAAA;AAAzB,CAAtB,EAA4D;AAGxD,QAAMC,MAAM,GAAGd,SAAS,GACjBe,MADQ,CACD,CAACJ,OAAD,EAASC,OAAT,CADC,EAGX;AAHW,GAITI,KAJS,CAIH,CAAC,CAAD,EAAIH,UAAU,CAACI,KAAf,CAJG,CAAf,CAHwD,CAOrB;;AAEjC,QAAMC,MAAM,GAAIjB,WAAW,GACvBc,MADY,CACL,CAAC,CAAD,EAAI,GAAJ,CADK,EACO;AADP,GAEZC,KAFY,CAEN,CAACH,UAAU,CAACM,MAAZ,EAAoB,EAApB,CAFM,CAAhB,CATsD,CAWjB;;AAGrC,QAAMC,KAAK,GAAGrB,QAAQ,CAACmB,MAAD,CAAtB;AACAR,EAAAA,GAAG,CACFf,MADD,CACQ,SADR,EAEC0B,KAFD,CAEO,OAFP,EAEgB,MAFhB,EAGCA,KAHD,CAGO,WAHP,EAGoB,IAHpB,EAICC,IAJD,CAIMF,KAJN,EAfsD,CAqBtD;;AACAV,EAAAA,GAAG,CAACa,MAAJ,CAAW,MAAX,EACCC,IADD,CACM,aADN,EACqB,KADrB,EAECA,IAFD,CAEM,MAFN,EAEc,MAFd,EAGCA,IAHD,CAGM,GAHN,EAGWX,UAAU,CAACI,KAHtB,EAIEO,IAJF,CAIO,GAJP,EAIYX,UAAU,CAACM,MAAX,GAAqB,EAJjC,EAKEM,IALF,CAKO,MALP;AAOD,QAAMC,KAAK,GAAG5B,UAAU,CAACgB,MAAD,CAAxB;AACAJ,EAAAA,GAAG,CACDf,MADF,CACS,SADT,EAEE0B,KAFF,CAEQ,WAFR,EAEsB,cAAaR,UAAU,CAACM,MAAO,KAFrD,EAGEE,KAHF,CAGQ,OAHR,EAGiB,MAHjB,EAIEA,KAJF,CAIQ,WAJR,EAIqB,IAJrB,EAKEA,KALF,CAKQ,cALR,EAKwB,CALxB,EAMEC,IANF,CAMOI,KANP,EA9BuD,CAsCtD;;AACA,MAAIC,KAAK,GAAGjB,GAAG,CAACa,MAAJ,CAAW,GAAX,EACRC,IADQ,CACH,OADG,EACM,MADN,EAERA,IAFQ,CAEH,WAFG,EAEU,iBAFV,EAGRF,IAHQ,CAGHvB,QAAQ,CAACmB,MAAD,CAAR,CACFU,QADE,CACO,CAAEf,UAAU,CAACI,KADpB,EAEFY,UAFE,CAES,EAFT,CAHG,CAAZ,CAvCsD,CA+CtD;;AACAnB,EAAAA,GAAG,CAACa,MAAJ,CAAW,MAAX,EACDC,IADC,CACI,aADJ,EACmB,KADnB,EAEDA,IAFC,CAEI,WAFJ,EAEiB,aAFjB,EAGDA,IAHC,CAGI,MAHJ,EAGY,MAHZ,EAIDA,IAJC,CAII,GAJJ,EAIS,CAAE,EAJX,EAKDA,IALC,CAKI,GALJ,EAKS,CALT,EAMDC,IANC,CAMI,SANJ;AAUL;;AAED,eAAehB,YAAf","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks} from 'd3';\r\nimport '../../styles/charts.css'\r\n\r\nfunction ChartVorlage({ svg, minDate, maxDate, dimensions}) {\r\n\r\n    \r\n    const xScale = scaleTime()\r\n          .domain([minDate,maxDate])\r\n          \r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        \r\n      const yScale =  scaleLinear()\r\n         .domain([0, 100])   //todo\r\n         .range([dimensions.height, 30]);  //change\r\n\r\n      \r\n      const yAxis = axisLeft(yScale);   \r\n      svg\r\n      .select('.y-axis')\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .call(yAxis);\r\n\r\n      //X-Achsen-Beschriftung\r\n      svg.append(\"text\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"fill\", \"grey\")\r\n      .attr(\"x\", dimensions.width)\r\n       .attr(\"y\", dimensions.height  + 50)\r\n       .text(\"Jahr\");\r\n\r\n     const xAxis = axisBottom(xScale)\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .style('stroke-width', 1)\r\n      .call(xAxis);\r\n      \r\n      //Grids\r\n      var grids = svg.append(\"g\")\r\n         .attr(\"class\", \"grid\")\r\n         .attr('transform', 'translate(50,50')\r\n         .call(axisLeft(yScale)\r\n            .tickSize(-(dimensions.width))\r\n            .tickFormat(\"\")\r\n            )\r\n\r\n      //Y-Achsen-Beschrifzung\r\n      svg.append(\"text\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .attr(\"fill\", \"grey\")\r\n    .attr(\"y\", - 50)\r\n    .attr(\"x\", 0)\r\n    .text(\"Prozent\")\r\n\r\n  \r\n\r\n}\r\n\r\nexport default ChartVorlage;"]},"metadata":{},"sourceType":"module"}