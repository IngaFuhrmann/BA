{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\NumberGender.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks } from 'd3';\nimport useResizeObserver from \"./useReziseObserver\";\n\nfunction NumberGen({\n  data,\n  property,\n  gen,\n  number\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState([0, 1.5]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selection = _useState2[0],\n        setSelection = _useState2[1];\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return;\n    var filtered = data.filter(a => a.geo == property);\n    var finalFilter = filtered.filter(b => b.gen == gen);\n    svg.selectAll(\"text\").data(finalFilter).join(\"text\").transition().text(s => s.time[Object.keys(s.time)[0]] + \"%\").attr('x', 0).attr('y', 60).attr(\"fill\", \"#2770bc\");\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    className: \"prozentwrap\",\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    className: \"Prozent\",\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }));\n}\n\nexport default NumberGen;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/NumberGender.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","useResizeObserver","NumberGen","data","property","gen","number","svgRef","wrapperRef","dimensions","selection","setSelection","svg","current","filtered","filter","a","geo","finalFilter","b","selectAll","join","transition","text","s","time","Object","keys","attr"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DC,SAA5D,EAAuEC,WAAvE,EAAoFC,SAApF,EAA+FC,GAA/F,EAAoGC,GAApG,EAAyGC,KAAzG,EAAgHC,QAAhH,EAA0HC,KAA1H,EAAiIC,KAAjI,QAA6I,IAA7I;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAGA,SAASC,SAAT,CAAmB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,QAAR;AAAkBC,EAAAA,GAAlB;AAAuBC,EAAAA;AAAvB,CAAnB,EAAoD;AAEhD,QAAMC,MAAM,GAAGvB,MAAM,EAArB;AACA,QAAMwB,UAAU,GAAGxB,MAAM,EAAzB;AACA,QAAMyB,UAAU,GAAGR,iBAAiB,CAACO,UAAD,CAApC;;AAJgD,oBAKdtB,QAAQ,CAAC,CAAC,CAAD,EAAI,GAAJ,CAAD,CALM;AAAA;AAAA,QAKzCwB,SALyC;AAAA,QAK9BC,YAL8B;;AAOhD1B,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAM2B,GAAG,GAAGzB,MAAM,CAACoB,MAAM,CAACM,OAAR,CAAlB;AAEC,QAAG,CAACJ,UAAJ,EAAgB;AAEjB,QAAIK,QAAQ,GAAGX,IAAI,CAACY,MAAL,CAAYC,CAAC,IAAEA,CAAC,CAACC,GAAF,IAAOb,QAAtB,CAAf;AACD,QAAIc,WAAW,GAAGJ,QAAQ,CAACC,MAAT,CAAgBI,CAAC,IAAEA,CAAC,CAACd,GAAF,IAAOA,GAA1B,CAAlB;AAEAO,IAAAA,GAAG,CACDQ,SADF,CACY,MADZ,EAEEjB,IAFF,CAEOe,WAFP,EAGEG,IAHF,CAGO,MAHP,EAIEC,UAJF,GAKEC,IALF,CAKQC,CAAD,IAAQA,CAAC,CAACC,IAAF,CAAOC,MAAM,CAACC,IAAP,CAAYH,CAAC,CAACC,IAAd,EAAoB,CAApB,CAAP,CAAD,GAAmC,GALjD,EAMEG,IANF,CAMO,GANP,EAMY,CANZ,EAOEA,IAPF,CAOO,GAPP,EAOY,EAPZ,EAQEA,IARF,CAQO,MARP,EAQe,SARf;AAWN,GAnBY,EAmBV,CAACzB,IAAD,EAAOM,UAAP,EAAmBL,QAAnB,CAnBU,CAAT;AAoBJ,SACC;AAAK,IAAA,SAAS,EAAC,aAAf;AAA6B,IAAA,GAAG,EAAEI,UAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAK,IAAA,SAAS,EAAC,SAAf;AAAyB,IAAA,GAAG,EAAED,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,CADD;AAOC;;AAED,eAAeL,SAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks} from 'd3';\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\n\r\nfunction NumberGen({ data, property, gen, number }) {\r\n\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selection, setSelection] = useState([0, 1.5]);\r\n \r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n     \r\n         if(!dimensions) return;\r\n\r\n        var filtered = data.filter(a=>a.geo==property);\r\n       var finalFilter = filtered.filter(b=>b.gen==gen);\r\n\r\n       svg\r\n        .selectAll(\"text\")\r\n        .data(finalFilter)\r\n        .join(\"text\")\r\n        .transition()\r\n        .text((s) => (s.time[Object.keys(s.time)[0]]) + \"%\")\r\n        .attr('x', 0)\r\n        .attr('y', 60)\r\n        .attr(\"fill\", \"#2770bc\")\r\n\r\n\r\n}, [data, dimensions, property]);\r\nreturn (\r\n <div className=\"prozentwrap\" ref={wrapperRef} >\r\n    <svg className=\"Prozent\" ref={svgRef}>\r\n     \r\n    </svg>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default NumberGen;"]},"metadata":{},"sourceType":"module"}