{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChartOnline.jsx\";\nimport React, { useRef, useEffect } from \"react\";\nimport { select, min, max, scaleTime, scaleLinear, axisBottom } from \"d3\";\nimport useResizeObserver from \"./useReziseObserver\";\n\nconst getDate = dateString => {\n  const date = dateString.split(\"-\");\n  return new Date(date[2], date[0] - 1, date[1]);\n};\n\nfunction LivingOnlineChart({\n  data,\n  highlight\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return;\n    const minDate = min(data, episode => getDate(episode.air_date));\n    const maxDate = max(data, episode => getDate(episode.air_date));\n    const xScale = scaleTime().domain([minDate, maxDate]).range([0, dimensions.width]);\n    const yScale = scaleLinear().domain([max(data, episode => episode.characters.length), 0]).range([0, dimensions.height]);\n    svg.selectAll(\".episode\").data(data).join(\"line\").attr(\"class\", \"episode\").attr(\"stroke\", episode => episode.characters.includes(highlight) ? \"blue\" : \"black\").attr(\"x1\", episode => xScale(getDate(episode.air_date))).attr(\"y1\", dimensions.height).attr(\"x2\", episode => xScale(getDate(episode.air_date))).attr(\"y2\", episode => yScale(episode.characters.length));\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style(\"transform\", `translateY(${dimensions.height}px)`).call(xAxis); // draw the gauge\n  }, [data, dimensions, highlight]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\",\n      height: \"600px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })));\n}\n\nexport default LivingOnlineChart;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChartOnline.jsx"],"names":["React","useRef","useEffect","select","min","max","scaleTime","scaleLinear","axisBottom","useResizeObserver","getDate","dateString","date","split","Date","LivingOnlineChart","data","highlight","svgRef","wrapperRef","dimensions","svg","current","minDate","episode","air_date","maxDate","xScale","domain","range","width","yScale","characters","length","height","selectAll","join","attr","includes","xAxis","style","call","marginBottom"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect } from \"react\";\r\nimport { select, min, max, scaleTime, scaleLinear, axisBottom } from \"d3\";\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\nconst getDate = dateString => {\r\n  const date = dateString.split(\"-\");\r\n  return new Date(date[2], date[0] - 1, date[1]);\r\n};\r\n\r\nfunction LivingOnlineChart({ data, highlight }) {\r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n\r\n  // will be called initially and on every data change\r\n  useEffect(() => {\r\n    const svg = select(svgRef.current);\r\n    if (!dimensions) return;\r\n\r\n    const minDate = min(data, episode => getDate(episode.air_date));\r\n    const maxDate = max(data, episode => getDate(episode.air_date));\r\n\r\n    const xScale = scaleTime()\r\n      .domain([minDate, maxDate])\r\n      .range([0, dimensions.width]);\r\n\r\n    const yScale = scaleLinear()\r\n      .domain([max(data, episode => episode.characters.length), 0])\r\n      .range([0, dimensions.height]);\r\n\r\n    svg\r\n      .selectAll(\".episode\")\r\n      .data(data)\r\n      .join(\"line\")\r\n      .attr(\"class\", \"episode\")\r\n      .attr(\"stroke\", episode =>\r\n        episode.characters.includes(highlight) ? \"blue\" : \"black\"\r\n      )\r\n      .attr(\"x1\", episode => xScale(getDate(episode.air_date)))\r\n      .attr(\"y1\", dimensions.height)\r\n      .attr(\"x2\", episode => xScale(getDate(episode.air_date)))\r\n      .attr(\"y2\", episode => yScale(episode.characters.length));\r\n\r\n    const xAxis = axisBottom(xScale);\r\n    svg\r\n      .select(\".x-axis\")\r\n      .style(\"transform\", `translateY(${dimensions.height}px)`)\r\n      .call(xAxis);\r\n\r\n    // draw the gauge\r\n  }, [data, dimensions, highlight]);\r\n\r\n  return (\r\n    <div ref={wrapperRef} style={{ marginBottom: \"2rem\", height: \"600px\" }}>\r\n      <svg ref={svgRef}>\r\n        <g className=\"x-axis\" />\r\n      </svg>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LivingOnlineChart;"]},"metadata":{},"sourceType":"module"}