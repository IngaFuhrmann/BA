{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, timeFormat } from 'd3';\nimport { timeParse } from \"d3-time-format\";\nimport '../../styles/charts.css';\nimport useResizeObserver from './useReziseObserver';\n\nfunction LineCharts({\n  data\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    console.log(data);\n    if (!dimensions) return; //Sortieren nach Jahreszahl\n\n    const minDate = min(data, value => value.time);\n    const maxDate = max(data, value => value.time);\n    console.log(minDate);\n    console.log(maxDate);\n    const xScale = scaleTime().domain([\"2\" + minDate, \"2\" + maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n    // .padding(0.5);\n\n    console.log(minDate, maxDate);\n    const yScale = scaleLinear().domain([0, 200]) //todo\n    .range([dimensions.height, 0]); //change\n\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', `translateX(${dimensions.width}px -100)`).call(yAxis);\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").tickFormat(timeFormat(\"%Y\")).style('transform', `translateY(${dimensions.height}px)`).call(xAxis);\n    /**  svg\r\n     .selectAll('circle')\r\n     .data(data)\r\n     .join('circle')\r\n     .attr(\"r\", value => value)\r\n     .attr('cx', value => value * 2)\r\n     .attr(\"cy\", value => value * 2)\r\n     .attr(\"stroke\", 'red');*/\n\n    const myLine = line().x((value, index) => xScale(index)).y(yScale).curve(curveCardinal);\n    svg.selectAll(\".line\").data([data]).join(\"path\").attr(\"class\", \"line\").attr('d', myLine).attr('fill', 'none').attr(\"stroke\", \"#2770bc\").attr(\"stroke-width\", 4);\n    /* .selectAll(\".bar\")\r\n     .data(data)\r\n     .join(\"rect\")\r\n     .attr(\"class\", \"bar\")\r\n     .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n     .attr(\"x\", (value, index) => xScale(index))\r\n     .attr(\"y\", -dimensions.height) //Animation: nach unten, weil die Bars gedreht wurden\r\n     .attr(\"width\", xScale.bandwidth())\r\n     .on(\"mouseenter\", (value, index) => {\r\n        svg //Tooltip\r\n        .selectAll(\".tooltip\")\r\n        .data([value])\r\n        .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n        .attr(\"class\", \"tooltip\")\r\n        .text(value)\r\n        .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n        \r\n        .attr(\"text-anchor\", \"middle\")\r\n        .transition()\r\n        .attr(\"y\", yScale(value) - 8)\r\n        .attr(\"opacity\", 1);\r\n     })\r\n     .on(\"mouseleave\", () => \r\n     svg\r\n     .select(\".tooltip\").remove())\r\n     .transition()\r\n     .attr(\"fill\", colorScale)\r\n     .attr(\"height\", value => dimensions.height - yScale(value))*/\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","timeFormat","timeParse","useResizeObserver","LineCharts","data","svgRef","wrapperRef","dimensions","svg","current","console","log","minDate","value","time","maxDate","xScale","domain","range","width","yScale","height","yAxis","style","call","xAxis","tickFormat","myLine","x","index","y","curve","selectAll","join","attr"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAkD,OAAlD;AACA,SAASC,MAAT,EAAiBC,IAAjB,EAAuBC,aAAvB,EAAsCC,UAAtC,EAAkDC,QAAlD,EAA4DC,SAA5D,EAAuEC,WAAvE,EAAoFC,SAApF,EAA+FC,GAA/F,EAAoGC,GAApG,EAAyGC,UAAzG,QAA2H,IAA3H;AACA,SAASC,SAAT,QAA0B,gBAA1B;AACA,OAAO,yBAAP;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAEA,SAASC,UAAT,CAAoB;AAAEC,EAAAA;AAAF,CAApB,EAA8B;AAC3B,QAAMC,MAAM,GAAGlB,MAAM,EAArB;AACA,QAAMmB,UAAU,GAAGnB,MAAM,EAAzB;AACA,QAAMoB,UAAU,GAAGL,iBAAiB,CAACI,UAAD,CAApC,CAH2B,CAI3B;;AACAlB,EAAAA,SAAS,CAAC,MAAM;AACb,UAAMoB,GAAG,GAAGlB,MAAM,CAACe,MAAM,CAACI,OAAR,CAAlB;AACGC,IAAAA,OAAO,CAACC,GAAR,CAAYP,IAAZ;AAEA,QAAG,CAACG,UAAJ,EAAgB,OAJN,CAMb;;AAEA,UAAMK,OAAO,GAAGd,GAAG,CAACM,IAAD,EAAOS,KAAK,IAAIA,KAAK,CAACC,IAAtB,CAAnB;AACA,UAAMC,OAAO,GAAGhB,GAAG,CAACK,IAAD,EAAOS,KAAK,IAAIA,KAAK,CAACC,IAAtB,CAAnB;AAEAJ,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYI,OAAZ;AAGA,UAAMC,MAAM,GAAGrB,SAAS,GACnBsB,MADU,CACH,CAAC,MAAML,OAAP,EAAgB,MAAMG,OAAtB,CADG,EAGb;AAHa,KAIXG,KAJW,CAIL,CAAC,CAAD,EAAIX,UAAU,CAACY,KAAf,CAJK,CAAf,CAfa,CAmBoB;AAC/B;;AACAT,IAAAA,OAAO,CAACC,GAAR,CAAYC,OAAZ,EAAqBG,OAArB;AACF,UAAMK,MAAM,GAAIxB,WAAW,GACvBqB,MADY,CACL,CAAC,CAAD,EAAI,GAAJ,CADK,EACO;AADP,KAEZC,KAFY,CAEN,CAACX,UAAU,CAACc,MAAZ,EAAoB,CAApB,CAFM,CAAhB,CAtBa,CAwBuB;;AAKpC,UAAMC,KAAK,GAAG5B,QAAQ,CAAC0B,MAAD,CAAtB;AACAZ,IAAAA,GAAG,CAAClB,MAAJ,CAAW,SAAX,EACIiC,KADJ,CACU,WADV,EACwB,cAAahB,UAAU,CAACY,KAAM,UADtD,EAEIK,IAFJ,CAESF,KAFT;AAID,UAAMG,KAAK,GAAGhC,UAAU,CAACuB,MAAD,CAAxB;AAEAR,IAAAA,GAAG,CACDlB,MADF,CACS,SADT,EAEEoC,UAFF,CAEa1B,UAAU,CAAC,IAAD,CAFvB,EAGEuB,KAHF,CAGQ,WAHR,EAGsB,cAAahB,UAAU,CAACc,MAAO,KAHrD,EAIEG,IAJF,CAIOC,KAJP;AAMA;;;;;;;;;AAQC,UAAME,MAAM,GAAGpC,IAAI,GAClBqC,CADc,CACZ,CAACf,KAAD,EAAQgB,KAAR,KAAkBb,MAAM,CAACa,KAAD,CADZ,EAEdC,CAFc,CAEZV,MAFY,EAGdW,KAHc,CAGRvC,aAHQ,CAAf;AAKAgB,IAAAA,GAAG,CACFwB,SADD,CACW,OADX,EAEC5B,IAFD,CAEM,CAACA,IAAD,CAFN,EAGC6B,IAHD,CAGM,MAHN,EAICC,IAJD,CAIM,OAJN,EAIe,MAJf,EAKCA,IALD,CAKM,GALN,EAKWP,MALX,EAMCO,IAND,CAMM,MANN,EAMc,MANd,EAOCA,IAPD,CAOM,QAPN,EAOgB,SAPhB,EAQCA,IARD,CAQM,cARN,EAQsB,CARtB;AAUH;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BC,GA7FQ,EA6FN,CAAC9B,IAAD,EAAOG,UAAP,CA7FM,CAAT;AA8FA,SACM;AAAK,IAAA,GAAG,EAAED,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAK,IAAA,GAAG,EAAED,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADH,EAEG;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFH,CADH,CADN;AAQF;;AAED,eAAeF,UAAf","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, timeFormat } from 'd3';\r\nimport { timeParse } from \"d3-time-format\";\r\nimport '../../styles/charts.css'\r\nimport useResizeObserver from './useReziseObserver'\r\n\r\nfunction LineCharts({ data }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n         console.log(data);\r\n\r\n         if(!dimensions) return;\r\n      \r\n      //Sortieren nach Jahreszahl\r\n      \r\n      const minDate = min(data, value => value.time);\r\n      const maxDate = max(data, value => value.time);\r\n\r\n      console.log(minDate);\r\n      console.log(maxDate);\r\n\r\n\r\n      const xScale = scaleTime()\r\n          .domain([\"2\" + minDate, \"2\" + maxDate])\r\n          \r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        // .padding(0.5);\r\n        console.log(minDate, maxDate);\r\n      const yScale =  scaleLinear()\r\n         .domain([0, 200])   //todo\r\n         .range([dimensions.height, 0]);  //change\r\n\r\n      \r\n         \r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', `translateX(${dimensions.width}px -100)`)\r\n         .call(yAxis);\r\n\r\n     const xAxis = axisBottom(xScale)\r\n     \r\n     svg\r\n      .select(\".x-axis\")\r\n      .tickFormat(timeFormat(\"%Y\"))\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .call(xAxis)\r\n      \r\n     /**  svg\r\n      .selectAll('circle')\r\n      .data(data)\r\n      .join('circle')\r\n      .attr(\"r\", value => value)\r\n      .attr('cx', value => value * 2)\r\n      .attr(\"cy\", value => value * 2)\r\n      .attr(\"stroke\", 'red');*/\r\n      const myLine = line()\r\n      .x((value, index) => xScale(index)) \r\n      .y(yScale)\r\n      .curve(curveCardinal);\r\n\r\n      svg\r\n      .selectAll(\".line\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"class\", \"line\")\r\n      .attr('d', myLine)\r\n      .attr('fill', 'none')\r\n      .attr(\"stroke\", \"#2770bc\")\r\n      .attr(\"stroke-width\", 4)\r\n\r\n   /* .selectAll(\".bar\")\r\n    .data(data)\r\n    .join(\"rect\")\r\n    .attr(\"class\", \"bar\")\r\n    .style(\"transform\", \"scale(1, -1\") //Animation: Auf den KOpf stellen!\r\n    .attr(\"x\", (value, index) => xScale(index))\r\n    .attr(\"y\", -dimensions.height) //Animation: nach unten, weil die Bars gedreht wurden\r\n    .attr(\"width\", xScale.bandwidth())\r\n    .on(\"mouseenter\", (value, index) => {\r\n       svg //Tooltip\r\n       .selectAll(\".tooltip\")\r\n       .data([value])\r\n       .join(enter => enter.append(\"text\").attr(\"y\", yScale(value) -4))\r\n       .attr(\"class\", \"tooltip\")\r\n       .text(value)\r\n       .attr(\"x\", xScale(index) + xScale.bandwidth() / 2 )\r\n       \r\n       .attr(\"text-anchor\", \"middle\")\r\n       .transition()\r\n       .attr(\"y\", yScale(value) - 8)\r\n       .attr(\"opacity\", 1);\r\n    })\r\n    .on(\"mouseleave\", () => \r\n    svg\r\n    .select(\".tooltip\").remove())\r\n    .transition()\r\n    .attr(\"fill\", colorScale)\r\n    .attr(\"height\", value => dimensions.height - yScale(value))*/\r\n   }, [data, dimensions]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}