{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React from 'react';\nimport { scaleOrdinal } from 'd3-scale';\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\nimport { csvParse } from 'd3-dsv';\nimport dataCsv from './data';\nimport './chart.css';\nconst width = 960,\n      height = 500,\n      radius = Math.min(width, height) / 2;\nconst color = scaleOrdinal().range(['#98abc5', '#8a89a6', '#7b6888', '#6b486b', '#a05d56', '#d0743c', '#ff8c00']);\nconst arc = d3Arc().outerRadius(radius - 10).innerRadius(radius - 70);\nconst pie = d3Pie().sort(null).value(function (d) {\n  return d.population;\n});\nconst data = pie(csvParse(dataCsv, d => {\n  d.population = +d.population;\n  return d;\n})); // <DonutChart/>\n\nexport default (() => {\n  return React.createElement(\"svg\", {\n    width: width,\n    height: height,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    transform: `translate(${width / 2}, ${height / 2})`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, data.map(d => React.createElement(\"g\", {\n    className: \"arc\",\n    key: `a${d.data.age}`,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, React.createElement(\"path\", {\n    d: arc(d),\n    fill: color(d.data.age),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }), React.createElement(\"text\", {\n    transform: `translate(${arc.centroid(d)})`,\n    dy: \".35em\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, d.data.age)))));\n});\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n      const data = [ 2, 4, 2, 6, 8 ]\r\n      this.drawBarChart(data)\r\n  }\r\n  drawBarChart(data)  {\r\n      const canvasHeight = 400\r\n      const canvasWidth = 600\r\n      const scale = 20\r\n      const svgCanvas = d3.select(this.refs.canvas)\r\n          .append('svg')\r\n          .attr('width', canvasWidth)\r\n          .attr('height', canvasHeight)\r\n          .style('border', '1px solid black')\r\n\r\n      svgCanvas.selectAll('rect')\r\n          .data(data).enter()\r\n              .append('rect')\r\n              .attr('width', 40)\r\n              .attr('height', (datapoint) => datapoint * scale)\r\n              .attr('fill', 'orange')\r\n              .attr('x', (datapoint, iteration) => iteration * 45)\r\n              .attr('y', (datapoint) => canvasHeight - datapoint * scale)\r\n\r\n              svgCanvas.selectAll('text')\r\n              .data(data).enter()\r\n                  .append('text')\r\n                  .attr('x', (dataPoint, i) => i * 45 + 10)\r\n                  .attr('y', (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\r\n                  .text(dataPoint => dataPoint)\r\n  }\r\n  render()\r\n   { return <div ref=\"canvas\"></div> }\r\n}\r\nexport default BarChart; */\n\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","scaleOrdinal","arc","d3Arc","pie","d3Pie","csvParse","dataCsv","width","height","radius","Math","min","color","range","outerRadius","innerRadius","sort","value","d","population","data","map","age","centroid"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,UAA7B;AACA,SAASC,GAAG,IAAIC,KAAhB,EAAuBC,GAAG,IAAIC,KAA9B,QAA2C,UAA3C;AACA,SAASC,QAAT,QAAyB,QAAzB;AAEA,OAAOC,OAAP,MAAoB,QAApB;AAEA,OAAO,aAAP;AAEA,MAAMC,KAAK,GAAG,GAAd;AAAA,MACEC,MAAM,GAAG,GADX;AAAA,MAEEC,MAAM,GAAGC,IAAI,CAACC,GAAL,CAASJ,KAAT,EAAgBC,MAAhB,IAA0B,CAFrC;AAIA,MAAMI,KAAK,GAAGZ,YAAY,GAAGa,KAAf,CAAqB,CACjC,SADiC,EAEjC,SAFiC,EAGjC,SAHiC,EAIjC,SAJiC,EAKjC,SALiC,EAMjC,SANiC,EAOjC,SAPiC,CAArB,CAAd;AAUA,MAAMZ,GAAG,GAAGC,KAAK,GACdY,WADS,CACGL,MAAM,GAAG,EADZ,EAETM,WAFS,CAEGN,MAAM,GAAG,EAFZ,CAAZ;AAIA,MAAMN,GAAG,GAAGC,KAAK,GACdY,IADS,CACJ,IADI,EAETC,KAFS,CAEH,UAASC,CAAT,EAAY;AACjB,SAAOA,CAAC,CAACC,UAAT;AACD,CAJS,CAAZ;AAMA,MAAMC,IAAI,GAAGjB,GAAG,CACdE,QAAQ,CAACC,OAAD,EAAUY,CAAC,IAAI;AACrBA,EAAAA,CAAC,CAACC,UAAF,GAAe,CAACD,CAAC,CAACC,UAAlB;AACA,SAAOD,CAAP;AACD,CAHO,CADM,CAAhB,C,CAOA;;AACA,gBAAe,MAAM;AACnB,SACE;AAAK,IAAA,KAAK,EAAEX,KAAZ;AAAmB,IAAA,MAAM,EAAEC,MAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAG,aAAYD,KAAK,GAAG,CAAE,KAAIC,MAAM,GAAG,CAAE,GAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGY,IAAI,CAACC,GAAL,CAASH,CAAC,IACT;AAAG,IAAA,SAAS,EAAC,KAAb;AAAmB,IAAA,GAAG,EAAG,IAAGA,CAAC,CAACE,IAAF,CAAOE,GAAI,EAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAM,IAAA,CAAC,EAAErB,GAAG,CAACiB,CAAD,CAAZ;AAAiB,IAAA,IAAI,EAAEN,KAAK,CAACM,CAAC,CAACE,IAAF,CAAOE,GAAR,CAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAM,IAAA,SAAS,EAAG,aAAYrB,GAAG,CAACsB,QAAJ,CAAaL,CAAb,CAAgB,GAA9C;AAAkD,IAAA,EAAE,EAAC,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGA,CAAC,CAACE,IAAF,CAAOE,GADV,CAFF,CADD,CADH,CADF,CADF;AAcO,CAfT;AAiBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA","sourcesContent":["import React from 'react';\r\nimport { scaleOrdinal } from 'd3-scale';\r\nimport { arc as d3Arc, pie as d3Pie } from 'd3-shape';\r\nimport { csvParse } from 'd3-dsv';\r\n\r\nimport dataCsv from './data';\r\n\r\nimport './chart.css';\r\n\r\nconst width = 960,\r\n  height = 500,\r\n  radius = Math.min(width, height) / 2;\r\n\r\nconst color = scaleOrdinal().range([\r\n  '#98abc5',\r\n  '#8a89a6',\r\n  '#7b6888',\r\n  '#6b486b',\r\n  '#a05d56',\r\n  '#d0743c',\r\n  '#ff8c00',\r\n]);\r\n\r\nconst arc = d3Arc()\r\n  .outerRadius(radius - 10)\r\n  .innerRadius(radius - 70);\r\n\r\nconst pie = d3Pie()\r\n  .sort(null)\r\n  .value(function(d) {\r\n    return d.population;\r\n  });\r\n\r\nconst data = pie(\r\n  csvParse(dataCsv, d => {\r\n    d.population = +d.population;\r\n    return d;\r\n  })\r\n);\r\n\r\n// <DonutChart/>\r\nexport default () => {\r\n  return (\r\n    <svg width={width} height={height}>\r\n      <g transform={`translate(${width / 2}, ${height / 2})`}>\r\n        {data.map(d => (\r\n          <g className=\"arc\" key={`a${d.data.age}`}>\r\n            <path d={arc(d)} fill={color(d.data.age)} />\r\n            <text transform={`translate(${arc.centroid(d)})`} dy=\".35em\">\r\n              {d.data.age}\r\n            </text>\r\n          </g>\r\n        ))}\r\n      </g>\r\n    </svg>\r\n  );\r\n        }\r\n\r\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n      const data = [ 2, 4, 2, 6, 8 ]\r\n      this.drawBarChart(data)\r\n  }\r\n  drawBarChart(data)  {\r\n      const canvasHeight = 400\r\n      const canvasWidth = 600\r\n      const scale = 20\r\n      const svgCanvas = d3.select(this.refs.canvas)\r\n          .append('svg')\r\n          .attr('width', canvasWidth)\r\n          .attr('height', canvasHeight)\r\n          .style('border', '1px solid black')\r\n\r\n      svgCanvas.selectAll('rect')\r\n          .data(data).enter()\r\n              .append('rect')\r\n              .attr('width', 40)\r\n              .attr('height', (datapoint) => datapoint * scale)\r\n              .attr('fill', 'orange')\r\n              .attr('x', (datapoint, iteration) => iteration * 45)\r\n              .attr('y', (datapoint) => canvasHeight - datapoint * scale)\r\n\r\n              svgCanvas.selectAll('text')\r\n              .data(data).enter()\r\n                  .append('text')\r\n                  .attr('x', (dataPoint, i) => i * 45 + 10)\r\n                  .attr('y', (dataPoint, i) => canvasHeight - dataPoint * scale - 10)\r\n                  .text(dataPoint => dataPoint)\r\n  }\r\n  render()\r\n   { return <div ref=\"canvas\"></div> }\r\n}\r\nexport default BarChart; */\r\n\r\n\r\n/*class BarChart extends Component {\r\n  componentDidMount() {\r\n    this.drawChart(); //D3!\r\n  }\r\n\r\n  drawChart() {\r\n    const data = [12, 5, 6, 6, 9, 10];\r\n    var w;\r\n    var h;\r\n    const svg = d3.select(\"body\")\r\n    .append(\"svg\")\r\n    .attr(\"width\", w)\r\n    .attr(\"height\", h)\r\n    .style(\"margin-left\", 100);\r\n                  \r\n    svg.selectAll(\"rect\")\r\n      .data(data)\r\n      .enter()\r\n      .append(\"rect\")\r\n      .attr(\"x\", (d, i) => i * 70)\r\n      .attr(\"y\", (d, i) => h - 10 * d)\r\n      .attr(\"width\", 65)\r\n      .attr(\"height\", (d, i) => d * 10)\r\n      .attr(\"fill\", \"green\")\r\n  }\r\n        \r\n  render(){\r\n    return <div id={\"#\" + this.props.id}></div>\r\n  }\r\n}\r\n\r\nexport default BarChart; */"]},"metadata":{},"sourceType":"module"}