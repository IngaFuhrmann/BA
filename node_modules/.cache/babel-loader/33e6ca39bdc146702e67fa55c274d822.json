{"ast":null,"code":"import _slicedToArray from\"D:\\\\Studium\\\\Bachelor\\\\FinalHelper\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useRef,useEffect,useState}from\"react\";import{select,geoPath,geoMercator,min,max,scaleLinear}from\"d3\";import useResizeObserver from'./useReziseObserver';import'../../styles/header.css';function GeoChart(_ref){var data=_ref.data,property=_ref.property;var svgRef=useRef();var wrapperRef=useRef();var dimensions=useResizeObserver(wrapperRef);var _useState=useState(null),_useState2=_slicedToArray(_useState,2),selectedCountry=_useState2[0],setSelectedCountry=_useState2[1];useEffect(function(){var svg=select(svgRef.current);var minProp=min(data.features,function(feature){return feature.properties[property];});var maxProp=max(data.features,function(feature){return feature.properties[property];});var colorScale=scaleLinear().domain([minProp,maxProp]).range([\"#d4d4d6\",\"#203040\"]);var _ref2=dimensions||wrapperRef.current.getBoundingClientRect(),width=_ref2.width,height=_ref2.height;var projection=geoMercator().fitSize([width,height],data);var pathGenerator=geoPath().projection(projection);//Länder zeichnen\nsvg.selectAll(\".country\").data(data.features).join(\"path\").on(\"click\",function(feature){setSelectedCountry(feature);}).attr(\"class\",\"country\").attr(\"stroke\",\"white\").attr(\"stroke-width\",\"0.2\").transition().duration(500).attr(\"fill\",function(feature){return colorScale(feature.properties[property]);}).attr(\"d\",function(feature){return pathGenerator(feature);});//Label\nsvg.selectAll(\".label\").data([selectedCountry]).join(\"text\").attr(\"class\",\"label\").text(function(feature){return feature&&feature.properties.name+\": \\r\"+feature.properties[property].toLocaleString()+\" %\";}).attr(\"x\",width/2.5).attr(\"y\",height/1.6).attr(\"fill\",\"white\").attr(\"font-size\",\"10px\");},[data,dimensions,property,selectedCountry]);return React.createElement(\"div\",{className:\"wrapper\",ref:wrapperRef},React.createElement(\"svg\",{ref:svgRef,viewBox:\"420 218 190 190\",preserveAspectRatio:\"xMidYMid meet\"}));}export default GeoChart;","map":{"version":3,"sources":["D:/Studium/Bachelor/FinalHelper/src/components/charts/GeoChart.jsx"],"names":["React","useRef","useEffect","useState","select","geoPath","geoMercator","min","max","scaleLinear","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","minProp","features","feature","properties","maxProp","colorScale","domain","range","getBoundingClientRect","width","height","projection","fitSize","pathGenerator","selectAll","join","on","attr","transition","duration","text","name","toLocaleString"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, geoPath, geoMercator, min, max, scaleLinear } from \"d3\";\r\nimport useResizeObserver from './useReziseObserver'\r\nimport '../../styles/header.css'\r\n\r\n\r\nfunction GeoChart({ data, property }) {\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n    const [selectedCountry, setSelectedCountry] = useState(null);\r\n  \r\n    useEffect(() => {\r\n      const svg = select(svgRef.current);\r\n      \r\n      const minProp = min(data.features, feature => feature.properties[property]);\r\n      const maxProp = max(data.features, feature => feature.properties[property]);\r\n      \r\n      const colorScale = scaleLinear()\r\n        .domain([minProp, maxProp])\r\n        .range([\"#d4d4d6\", \"#203040\"]);\r\n  \r\n      const { width, height } =\r\n        dimensions || wrapperRef.current.getBoundingClientRect();\r\n  \r\n      const projection = geoMercator()\r\n        .fitSize([width, height], data);\r\n\r\n      const pathGenerator = geoPath().projection(projection);\r\n      //Länder zeichnen\r\n      svg\r\n        .selectAll(\".country\")\r\n        .data(data.features)\r\n        .join(\"path\")\r\n        .on(\"click\", feature => {\r\n          setSelectedCountry(feature);\r\n        })\r\n        .attr(\"class\", \"country\")\r\n        .attr(\"stroke\", \"white\")\r\n        .attr(\"stroke-width\", \"0.2\")\r\n        .transition()\r\n        .duration(500)\r\n        .attr(\"fill\", feature => colorScale(feature.properties[property]))\r\n        .attr(\"d\", feature => pathGenerator(feature))\r\n      //Label\r\n      svg\r\n        .selectAll(\".label\")\r\n        .data([selectedCountry])\r\n        .join(\"text\")\r\n        .attr(\"class\", \"label\")\r\n        .text( \r\n          feature =>\r\n            feature &&\r\n            feature.properties.name +\r\n              \": \\r\"+ \r\n              feature.properties[property].toLocaleString() + \" %\" \r\n        )\r\n        .attr(\"x\", width /2.5)\r\n        .attr(\"y\", (height/ 1.6))\r\n        .attr(\"fill\", \"white\")\r\n        .attr(\"font-size\", \"10px\")\r\n    }, [data, dimensions, property, selectedCountry]);\r\n  \r\n    return (\r\n      <div className=\"wrapper\" ref={wrapperRef}>\r\n        <svg ref={svgRef} viewBox={\"420 218 190 190\"} preserveAspectRatio=\"xMidYMid meet\"></svg>\r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default GeoChart;"]},"metadata":{},"sourceType":"module"}