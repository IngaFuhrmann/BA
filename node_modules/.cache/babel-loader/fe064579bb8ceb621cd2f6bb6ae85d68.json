{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\BarHighInternet.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand } from 'd3';\nimport useResizeObserver from \"./useReziseObserver\";\n\nfunction BarHighInternet({\n  data\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    var filterme;\n    if (!dimensions) return;\n    console.log(data);\n\n    for (var i = 0; i < data.length; i++) {\n      var filterme = filtered[i].time;\n    }\n\n    var vales = entries(filterme); //Sortieren nach Jahreszahl\n\n    const minDate = new Date(min(vales, value => value.key));\n    const maxDate = new Date(max(vales, value => value.key));\n    console.log(minDate);\n    console.log(maxDate);\n    /*  const xScale = scaleLinear()\r\n      .domain([0, 100])\r\n     .range([0, dimensions.width])\r\n     \r\n    \r\n      const yScale =  scaleBand()\r\n     .domain(data.map((value, index) => value.geo))\r\n     .range([20, dimensions.height ])\r\n     .padding(0.1)\r\n       const xAxis = axisBottom(xScale).ticks(4);\r\n         svg\r\n         .style('font-size', '10')\r\n         .style('color', 'grey')\r\n       .select(\".x-axis\")\r\n       .call(xAxis);\r\n      \r\n       const yAxis = axisLeft(yScale)  \r\n            .tickPadding(5)\r\n            .tickSizeOuter(0)\r\n            .tickSizeInner(0);\r\n            svg\r\n              .select(\".y-axis\")\r\n              .style('font-size', '10')\r\n              .style('color', 'grey')\r\n              .call(yAxis)\r\n            \r\n      /*        svg\r\n            .selectAll(\".bar\")\r\n            .data(data)\r\n            .join(\"rect\")\r\n            .attr(\"class\", \"bar\")\r\n            .attr(\"fill\", \"grey\")\r\n            .style(\"margin-top\", \"10px\")\r\n            .attr('x', xScale(0))\r\n            .attr('y', (s) => yScale(s.geo))\r\n            .attr('width', (s) => xScale(s[property][Object.keys(s[property])[0]]))\r\n            .attr('height', yScale.bandwidth)\r\n            .on(\"mouseenter\", (value, index) => {\r\n              svg\r\n                .selectAll(\".tooltip\")\r\n                .data([value])\r\n                .join(enter => enter.append(\"text\"))\r\n                .attr(\"class\", \"tooltip\")\r\n                .text(value[property][Object.keys(value[property])[0]] + \"%\")\r\n                .attr(\"x\", xScale(value[property][Object.keys(value[property])[0]]) - 30)\r\n                .attr(\"y\", yScale(value.geo) + yScale.bandwidth() / 1.4)\r\n                .attr(\"opacity\", 1)\r\n                .transition()\r\n                .attr(\"fill\", \"white\")\r\n              })\r\n              \r\n              .on(\"mouseleave\", () => \r\n                svg.select(\".tooltip\").remove()\r\n                .transition()\r\n     )\r\n    */\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    classname: \"chartWrap\",\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  })));\n}\n\nexport default BarHighInternet;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/BarHighInternet.jsx"],"names":["React","useRef","useEffect","useState","select","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","useResizeObserver","BarHighInternet","data","svgRef","wrapperRef","dimensions","svg","current","filterme","console","log","i","length","filtered","time","vales","entries","minDate","Date","min","value","key","maxDate","max"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,MAAhB,EAAwBC,SAAxB,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,SAASC,MAAT,EAAiBC,UAAjB,EAA6BC,QAA7B,EAAuCC,SAAvC,EAAkDC,WAAlD,EAA+DC,SAA/D,QAA+E,IAA/E;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;;AAGA,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAAkC;AAC/B,QAAMC,MAAM,GAAGZ,MAAM,EAArB;AACA,QAAMa,UAAU,GAAGb,MAAM,EAAzB;AACA,QAAMc,UAAU,GAAGL,iBAAiB,CAACI,UAAD,CAApC;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AAEf,UAAMc,GAAG,GAAGZ,MAAM,CAACS,MAAM,CAACI,OAAR,CAAlB;AACA,QAAIC,QAAJ;AACA,QAAG,CAACH,UAAJ,EAAgB;AAChBI,IAAAA,OAAO,CAACC,GAAR,CAAYR,IAAZ;;AAEA,SAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGT,IAAI,CAACU,MAAxB,EAAgCD,CAAC,EAAjC,EAAsC;AAClC,UAAIH,QAAQ,GAAGK,QAAQ,CAACF,CAAD,CAAR,CAAYG,IAA3B;AACE;;AAED,QAAIC,KAAK,GAAGC,OAAO,CAACR,QAAD,CAAnB,CAXU,CAahB;;AACA,UAAMS,OAAO,GAAG,IAAIC,IAAJ,CAAUC,GAAG,CAACJ,KAAD,EAAQK,KAAK,IAAIA,KAAK,CAACC,GAAvB,CAAb,CAAhB;AACA,UAAMC,OAAO,GAAG,IAAIJ,IAAJ,CAAUK,GAAG,CAACR,KAAD,EAAQK,KAAK,IAAIA,KAAK,CAACC,GAAvB,CAAb,CAAhB;AAEAZ,IAAAA,OAAO,CAACC,GAAR,CAAYO,OAAZ;AACAR,IAAAA,OAAO,CAACC,GAAR,CAAYY,OAAZ;AACD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0DD,GA7EW,EA6ET,CAACpB,IAAD,EAAOG,UAAP,CA7ES,CAAT;AA8EH,SACC;AAAK,IAAA,SAAS,EAAC,WAAf;AAA2B,IAAA,GAAG,EAAED,UAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG;AAAK,IAAA,GAAG,EAAED,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAG,IAAA,SAAS,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADH,CADD;AAQC;;AAED,eAAeF,eAAf","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand} from 'd3';\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\n\r\nfunction BarHighInternet({ data}) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n\r\n   useEffect(() => {\r\n\r\n    const svg = select(svgRef.current);\r\n    var filterme; \r\n    if(!dimensions) return;\r\n    console.log(data);\r\n\r\n    for(var i = 0; i < data.length; i ++) {\r\n        var filterme = filtered[i].time; \r\n         }\r\n\r\n         var vales = entries(filterme);\r\n\r\n   //Sortieren nach Jahreszahl\r\n   const minDate = new Date (min(vales, value => value.key));\r\n   const maxDate = new Date (max(vales, value => value.key));     \r\n\r\n   console.log(minDate);\r\n   console.log(maxDate);\r\n  /*  const xScale = scaleLinear()\r\n    .domain([0, 100])\r\n   .range([0, dimensions.width])\r\n   \r\n  \r\n    const yScale =  scaleBand()\r\n   .domain(data.map((value, index) => value.geo))\r\n   .range([20, dimensions.height ])\r\n   .padding(0.1)\r\n\r\n   const xAxis = axisBottom(xScale).ticks(4);\r\n       svg\r\n       .style('font-size', '10')\r\n       .style('color', 'grey')\r\n     .select(\".x-axis\")\r\n     .call(xAxis);\r\n    \r\n     const yAxis = axisLeft(yScale)  \r\n          .tickPadding(5)\r\n          .tickSizeOuter(0)\r\n          .tickSizeInner(0);\r\n          svg\r\n            .select(\".y-axis\")\r\n            .style('font-size', '10')\r\n            .style('color', 'grey')\r\n            .call(yAxis)\r\n          \r\n    /*        svg\r\n          .selectAll(\".bar\")\r\n          .data(data)\r\n          .join(\"rect\")\r\n          .attr(\"class\", \"bar\")\r\n          .attr(\"fill\", \"grey\")\r\n          .style(\"margin-top\", \"10px\")\r\n          .attr('x', xScale(0))\r\n          .attr('y', (s) => yScale(s.geo))\r\n          .attr('width', (s) => xScale(s[property][Object.keys(s[property])[0]]))\r\n          .attr('height', yScale.bandwidth)\r\n          .on(\"mouseenter\", (value, index) => {\r\n            svg\r\n              .selectAll(\".tooltip\")\r\n              .data([value])\r\n              .join(enter => enter.append(\"text\"))\r\n              .attr(\"class\", \"tooltip\")\r\n              .text(value[property][Object.keys(value[property])[0]] + \"%\")\r\n              .attr(\"x\", xScale(value[property][Object.keys(value[property])[0]]) - 30)\r\n              .attr(\"y\", yScale(value.geo) + yScale.bandwidth() / 1.4)\r\n              .attr(\"opacity\", 1)\r\n              .transition()\r\n              .attr(\"fill\", \"white\")\r\n            })\r\n            \r\n            .on(\"mouseleave\", () => \r\n              svg.select(\".tooltip\").remove()\r\n              .transition()\r\n   )\r\n*/\r\n   \r\n}, [data, dimensions]);\r\nreturn (\r\n <div classname=\"chartWrap\" ref={wrapperRef} >\r\n    <svg ref={svgRef}>\r\n      <g className=\"x-axis\" />\r\n      <g className=\"y-axis\" />\r\n    </svg>\r\n  </div>\r\n);\r\n}\r\n\r\nexport default BarHighInternet;"]},"metadata":{},"sourceType":"module"}