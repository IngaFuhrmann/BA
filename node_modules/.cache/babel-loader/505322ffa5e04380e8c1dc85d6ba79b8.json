{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, keys } from 'd3';\nimport '../../styles/charts.css';\nimport useResizeObserver from './useReziseObserver';\n\nfunction LineCharts({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        selectedCountry = _useState2[0],\n        setSelectedCountry = _useState2[1]; // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\n\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    console.log(data); //const test = data.value[0];\n    // console.log(test);\n\n    if (!dimensions) return;\n    var keysLine = keys(data[0]).filter(function (d) {\n      return d != \"geo\";\n    });\n    console.log(keysLine); //Sortieren nach Jahreszah\n\n    const minDate = new Date(min(data, value => Object.keys(value.time)[0]));\n    const maxDate = new Date(max(data, value => Object.keys(value.time)[3]));\n    console.log(minDate);\n    console.log(maxDate);\n    const xScale = scaleTime().domain([minDate, maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n\n    const yScale = scaleLinear().domain([0, 100]) //todo\n    .range([dimensions.height, 30]); //change\n\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('color', 'grey').style('font-size', '14').call(yAxis); //X-Achsen-Beschriftung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"fill\", \"grey\").attr(\"x\", dimensions.width).attr(\"y\", dimensions.height + 50).text(\"Jahr\");\n    const xAxis = axisBottom(xScale).ticks(4);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).style('color', 'grey').style('font-size', '14').style('stroke-width', 1).call(xAxis); //Grids\n\n    var grids = svg.append(\"g\").attr(\"class\", \"grid\") //.attr('transform', 'translate(50,50)')\n    .call(axisLeft(yScale).tickSize(-dimensions.width).tickFormat(\"\")); //Y-Achsen-Beschrifzung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"grey\").attr(\"y\", -50).attr(\"x\", 0).text(\"Prozent\");\n    /*     //Tooltip-Circle\r\n         var focus = svg\r\n         .append('g')\r\n         .append('circle')\r\n         .style(\"fill\", \"#2770bc\")\r\n         .attr('r', 8.5)\r\n         .style(\"opacity\", 0);\r\n    \n         //Tooltip- Values\r\n         var focusText = svg\r\n         .append('g')\r\n         .append('text')\r\n         .style(\"opacity\", 0)\r\n         .attr(\"text-anchor\", \"left\")\r\n         .attr(\"alignment-baseline\", \"middle\");\r\n    \n         svg\r\n         .append('rect')\r\n         .style(\"fill\", \"none\")\r\n         .style(\"pointer-events\", \"all\")\r\n         .attr('width', dimensions.width)\r\n         .attr('height', dimensions.height)\r\n         .on('mouseover', mouseover)\r\n         .on('mousemove', mousemove)\r\n         .on('mouseout', mouseout); */\n\n    const myLine = line().x(d => xScale(new Date(Object.keys(d.time)))).y(d => yScale(d[Object.keys(d)]) - dimensions.height).curve(curveCardinal);\n    svg.selectAll(\"path\").data([data]).join(\"path\").attr(\"d\", (value, index) => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"#2770bc\").attr(\"stroke-width\", \"5\");\n    /*   function mouseover() {\r\n          \r\n          focus.style(\"opacity\", 1).transition()\r\n          focusText.style(\"opacity\",1).transition()\r\n        }\r\n        \r\n        function mousemove() {\r\n          // recover coordinate we need\r\n          var x0 = xScale.invert(mouse(this)[0]);\r\n          const bisect = bisector(d => new Date(Object.keys(d.time))).left;\r\n          const idx = bisect(data, x0, 1);\r\n          const selectedData = data[idx];\r\n          console.log( selectedData);\r\n          \r\n          focus\r\n          .attr(\"cx\", xScale(new Date (selectedData.time)))\r\n          .attr(\"cy\", yScale(selectedData.value))\r\n          .transition()\r\n            focusText\r\n             \r\n             .text(selectedData.time  + \" : \" + selectedData.value)\r\n             .attr(\"x\", xScale(new Date (selectedData.time)))\r\n             .attr(\"y\", yScale(selectedData.value) - 30)\r\n             .transition()\r\n             \r\n        /*  focus\r\n            .attr(\"cx\", xScale(selectedData.x))\r\n            .attr(\"cy\", yScale(selectedData.y))\r\n          focusText\r\n            .html(\"x:\" + selectedData.x + \"  -  \" + \"y:\" + selectedData.y)\r\n            .attr(\"x\", selectedData.x)\r\n            .attr(\"y\", yScale(selectedData.y)) \r\n           \r\n          }\r\n        function mouseout() {\r\n          focus.style(\"opacity\", 0)\r\n          focusText.style(\"opacity\", 0)\r\n        }*/\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","keys","useResizeObserver","LineCharts","data","property","svgRef","wrapperRef","dimensions","selectedCountry","setSelectedCountry","svg","current","console","log","keysLine","filter","d","minDate","Date","value","Object","time","maxDate","xScale","domain","range","width","yScale","height","yAxis","style","call","append","attr","text","xAxis","grids","tickSize","tickFormat","myLine","x","y","curve","selectAll","join","index"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks, keys} from 'd3';\r\nimport '../../styles/charts.css'\r\nimport useResizeObserver from './useReziseObserver'\r\n\r\nfunction LineCharts({ data, property }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   const [selectedCountry, setSelectedCountry] = useState(null);\r\n  // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verÃ¤ndern\r\n   useEffect(() => {\r\n\r\n      const svg = select(svgRef.current);\r\n         console.log(data);\r\n      //const test = data.value[0];\r\n     // console.log(test);\r\n         if(!dimensions) return;\r\n      \r\n         var keysLine = keys(data[0]).filter(function(d) {\r\n            return d != \"geo\";\r\n          });\r\n          console.log(keysLine)  \r\n     \r\n      //Sortieren nach Jahreszah\r\n      const minDate = new Date (min(data, value => Object.keys(value.time)[0]));\r\n      const maxDate = new Date (max(data, value => Object.keys(value.time)[3]));\r\n\r\n      console.log(minDate);\r\n      console.log(maxDate);\r\n\r\n\r\n      const xScale = scaleTime()\r\n          .domain([minDate,maxDate])\r\n          \r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        \r\n      const yScale =  scaleLinear()\r\n         .domain([0, 100])   //todo\r\n         .range([dimensions.height, 30]);  //change\r\n\r\n      \r\n      const yAxis = axisLeft(yScale);   \r\n      svg\r\n      .select('.y-axis')\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .call(yAxis);\r\n\r\n      //X-Achsen-Beschriftung\r\n      svg.append(\"text\")\r\n      .attr(\"text-anchor\", \"end\")\r\n      .attr(\"fill\", \"grey\")\r\n      .attr(\"x\", dimensions.width)\r\n       .attr(\"y\", dimensions.height  + 50)\r\n       .text(\"Jahr\");\r\n\r\n     const xAxis = axisBottom(xScale).ticks(4)\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .style('color', 'grey')\r\n      .style('font-size', '14')\r\n      .style('stroke-width', 1)\r\n      .call(xAxis);\r\n      \r\n      //Grids\r\n      var grids = svg.append(\"g\")\r\n         .attr(\"class\", \"grid\")\r\n         //.attr('transform', 'translate(50,50)')\r\n         .call(axisLeft(yScale)\r\n            .tickSize(-(dimensions.width))\r\n            .tickFormat(\"\")\r\n            )\r\n\r\n      //Y-Achsen-Beschrifzung\r\n      svg.append(\"text\")\r\n    .attr(\"text-anchor\", \"end\")\r\n    .attr(\"transform\", \"rotate(-90)\")\r\n    .attr(\"fill\", \"grey\")\r\n    .attr(\"y\", - 50)\r\n    .attr(\"x\", 0)\r\n    .text(\"Prozent\")\r\n\r\n    \r\n\r\n /*     //Tooltip-Circle\r\n      var focus = svg\r\n      .append('g')\r\n      .append('circle')\r\n      .style(\"fill\", \"#2770bc\")\r\n      .attr('r', 8.5)\r\n      .style(\"opacity\", 0);\r\n\r\n      //Tooltip- Values\r\n      var focusText = svg\r\n      .append('g')\r\n      .append('text')\r\n      .style(\"opacity\", 0)\r\n      .attr(\"text-anchor\", \"left\")\r\n      .attr(\"alignment-baseline\", \"middle\");\r\n\r\n      svg\r\n      .append('rect')\r\n      .style(\"fill\", \"none\")\r\n      .style(\"pointer-events\", \"all\")\r\n      .attr('width', dimensions.width)\r\n      .attr('height', dimensions.height)\r\n      .on('mouseover', mouseover)\r\n      .on('mousemove', mousemove)\r\n      .on('mouseout', mouseout); */\r\n\r\n      const myLine = line()\r\n      .x((d)=> (xScale(new Date(Object.keys(d.time)))))\r\n      .y((d)=> (yScale(d[Object.keys(d)]) - dimensions.height))\r\n      .curve(curveCardinal);\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"d\", (value, index) => myLine(value))\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#2770bc\")\r\n      .attr(\"stroke-width\", \"5\" )\r\n      \r\n   /*   function mouseover() {\r\n         \r\n         focus.style(\"opacity\", 1).transition()\r\n         focusText.style(\"opacity\",1).transition()\r\n       }\r\n       \r\n       function mousemove() {\r\n         // recover coordinate we need\r\n         var x0 = xScale.invert(mouse(this)[0]);\r\n         const bisect = bisector(d => new Date(Object.keys(d.time))).left;\r\n         const idx = bisect(data, x0, 1);\r\n         const selectedData = data[idx];\r\n         console.log( selectedData);\r\n         \r\n         focus\r\n         .attr(\"cx\", xScale(new Date (selectedData.time)))\r\n         .attr(\"cy\", yScale(selectedData.value))\r\n         .transition()\r\n\r\n         focusText\r\n            \r\n            .text(selectedData.time  + \" : \" + selectedData.value)\r\n            .attr(\"x\", xScale(new Date (selectedData.time)))\r\n            .attr(\"y\", yScale(selectedData.value) - 30)\r\n            .transition()\r\n            \r\n       /*  focus\r\n           .attr(\"cx\", xScale(selectedData.x))\r\n           .attr(\"cy\", yScale(selectedData.y))\r\n         focusText\r\n           .html(\"x:\" + selectedData.x + \"  -  \" + \"y:\" + selectedData.y)\r\n           .attr(\"x\", selectedData.x)\r\n           .attr(\"y\", yScale(selectedData.y)) \r\n          \r\n         }\r\n       function mouseout() {\r\n         focus.style(\"opacity\", 0)\r\n         focusText.style(\"opacity\", 0)\r\n       }*/\r\n\r\n\r\n   }, [data, dimensions, property]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}