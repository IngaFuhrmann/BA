{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChart.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, ticks } from 'd3';\nimport { timeParse } from \"d3-time-format\";\nimport '../../styles/charts.css';\nimport useResizeObserver from './useReziseObserver';\n\nfunction LineCharts({\n  data,\n  highlight\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\n  //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    console.log(data); //const test = data.value[0];\n    // console.log(test);\n\n    if (!dimensions) return; //Sortieren nach Jahreszahl\n\n    const minDate = new Date(min(data, value => value.time));\n    const maxDate = new Date(max(data, value => value.time));\n    console.log(minDate);\n    console.log(maxDate);\n    const xScale = scaleTime().domain([minDate, maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n    // .padding(0.5);\n\n    console.log(minDate, maxDate);\n    const yScale = scaleLinear().domain([0, max(data, value => value.value)]) //todo\n    .range([dimensions.height, 0]); //change\n\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('transform', `translateX(${dimensions.width}px -100)`).call(yAxis);\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).call(xAxis);\n    const myLine = line().x(d => xScale(d.time)).y(d => yScale(d.value)).curve(curveCardinal);\n    console.log(yScale(data.time));\n    svg.selectAll(\"path\").data([data]).join(\"path\").attr(\"d\", value => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"blue\");\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  })));\n}\n\nexport default LineCharts;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChart.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","ticks","timeParse","useResizeObserver","LineCharts","data","highlight","svgRef","wrapperRef","dimensions","svg","current","console","log","minDate","Date","value","time","maxDate","xScale","domain","range","width","yScale","height","yAxis","style","call","xAxis","myLine","x","d","y","curve","selectAll","join","attr"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState} from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, ticks} from 'd3';\r\nimport { timeParse } from \"d3-time-format\";\r\nimport '../../styles/charts.css'\r\nimport useResizeObserver from './useReziseObserver'\r\n\r\nfunction LineCharts({ data, highlight }) {\r\n   const svgRef = useRef();\r\n   const wrapperRef = useRef();\r\n   const dimensions = useResizeObserver(wrapperRef);\r\n   \r\n  // const [dat, setData] = useState([25, 30, 45, 60, 20, 65, 75]);\r\n   //Wird einmal aufgerufen, wenn DOM-Element gerendert wird, und wenn sich Elemente im Array verändern\r\n   useEffect(() => {\r\n\r\n      const svg = select(svgRef.current);\r\n         console.log(data);\r\n      //const test = data.value[0];\r\n     // console.log(test);\r\n         if(!dimensions) return;\r\n      \r\n      //Sortieren nach Jahreszahl\r\n     \r\n      const minDate = new Date (min(data, value => value.time));\r\n      const maxDate = new Date (max(data, value => value.time));\r\n      \r\n     \r\n\r\n      console.log(minDate);\r\n      console.log(maxDate);\r\n\r\n\r\n      const xScale = scaleTime()\r\n          .domain([minDate,maxDate])\r\n        // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n         .range([0, dimensions.width]) //change\r\n        // .padding(0.5);\r\n        console.log(minDate, maxDate );\r\n      const yScale =  scaleLinear()\r\n         .domain([0, max(data, value => value.value),])   //todo\r\n         .range([dimensions.height, 0]);  //change\r\n\r\n      \r\n         \r\n\r\n      const yAxis = axisLeft(yScale);   \r\n      svg.select('.y-axis')\r\n         .style('transform', `translateX(${dimensions.width}px -100)`)\r\n         .call(yAxis);\r\n\r\n     const xAxis = axisBottom(xScale)\r\n     svg\r\n      .select(\".x-axis\")\r\n      .style('transform', `translateY(${dimensions.height}px)`)\r\n      .call(xAxis)\r\n\r\n      const myLine = line()\r\n      .x((d)=> (xScale(d.time)))\r\n      .y((d)=> (yScale(d.value)))\r\n      .curve(curveCardinal);\r\n      console.log(yScale(data.time));\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"d\", value => myLine(value))\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"blue\");\r\n\r\n   }, [data, dimensions]);\r\n   return (\r\n         <div ref={wrapperRef}>\r\n            <svg ref={svgRef}>\r\n               <g className='x-axis' />\r\n               <g className=\"y-axis\" />\r\n            </svg>\r\n            </div>\r\n   );\r\n}\r\n\r\nexport default LineCharts;"]},"metadata":{},"sourceType":"module"}