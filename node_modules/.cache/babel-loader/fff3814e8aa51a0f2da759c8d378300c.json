{"ast":null,"code":"import _slicedToArray from \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\LineChartOnline.jsx\";\nimport React, { useRef, useEffect, useState } from \"react\";\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks } from 'd3';\nimport useResizeObserver from \"./useReziseObserver\";\n\nfunction LivingOnlineChart({\n  data,\n  highlight\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  const _useState = useState([0, 1.5]),\n        _useState2 = _slicedToArray(_useState, 2),\n        selection = _useState2[0],\n        setSelection = _useState2[1];\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    if (!dimensions) return; //Sortieren nach Jahreszahl\n\n    const minDate = new Date(min(data, value => value.time));\n    const maxDate = new Date(max(data, value => value.time)); //Achsen und Grids\n\n    const xScale = scaleTime().domain([minDate, maxDate]) // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\n    .range([0, dimensions.width]); //change\n\n    const yScale = scaleLinear().domain([0, 100]) //todo\n    .range([dimensions.height, 30]); //change\n\n    const yAxis = axisLeft(yScale);\n    svg.select('.y-axis').style('color', 'grey').style('font-size', '14').call(yAxis); //X-Achsen-Beschriftung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"fill\", \"grey\").attr(\"x\", dimensions.width).attr(\"y\", dimensions.height + 50).text(\"Jahr\");\n    const xAxis = axisBottom(xScale);\n    svg.select(\".x-axis\").style('transform', `translateY(${dimensions.height}px)`).style('color', 'grey').style('font-size', '14').style('stroke-width', 1).call(xAxis); //Grids\n\n    var grids = svg.append(\"g\").attr(\"class\", \"grid\").attr('transform', 'translate(50,50').call(axisLeft(yScale).tickSize(-dimensions.width).tickFormat(\"\")); //Y-Achsen-Beschrifzung\n\n    svg.append(\"text\").attr(\"text-anchor\", \"end\").attr(\"transform\", \"rotate(-90)\").attr(\"fill\", \"grey\").attr(\"y\", -50).attr(\"x\", 0).text(\"Prozent\");\n    const myLine = line().x(d => xScale(new Date(d.time))).y(d => yScale(d.value) - dimensions.height).curve(curveCardinal);\n    svg.selectAll(\"path\").data([data]).join(\"path\").attr(\"d\", (value, index) => myLine(value)).attr(\"fill\", \"none\").attr(\"stroke\", \"#2770bc\").attr(\"stroke-width\", \"5\");\n  }, [data, dimensions]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })));\n}\n\nexport default LivingOnlineChart;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/LineChartOnline.jsx"],"names":["React","useRef","useEffect","useState","select","line","curveCardinal","axisBottom","axisLeft","scaleTime","scaleLinear","scaleBand","min","max","event","bisector","mouse","ticks","useResizeObserver","LivingOnlineChart","data","highlight","svgRef","wrapperRef","dimensions","selection","setSelection","svg","current","minDate","Date","value","time","maxDate","xScale","domain","range","width","yScale","height","yAxis","style","call","append","attr","text","xAxis","grids","tickSize","tickFormat","myLine","x","d","y","curve","selectAll","join","index"],"mappings":"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","sourcesContent":["import React, { useRef, useEffect, useState } from \"react\";\r\nimport { select, line, curveCardinal, axisBottom, axisLeft, scaleTime, scaleLinear, scaleBand, min, max, event, bisector, mouse, ticks} from 'd3';\r\nimport useResizeObserver from \"./useReziseObserver\";\r\n\r\n\r\nfunction LivingOnlineChart({ data, highlight }) {\r\n  \r\n  const svgRef = useRef();\r\n  const wrapperRef = useRef();\r\n  const dimensions = useResizeObserver(wrapperRef);\r\n  const [selection, setSelection] = useState([0, 1.5]);\r\n\r\n  useEffect(() => {\r\n\r\n    const svg = select(svgRef.current);\r\n    if(!dimensions) return;\r\n\r\n    //Sortieren nach Jahreszahl\r\n    const minDate = new Date (min(data, value => value.time));\r\n    const maxDate = new Date (max(data, value => value.time));\r\n\r\n    //Achsen und Grids\r\n    \r\n    const xScale = scaleTime()\r\n    .domain([minDate,maxDate])\r\n    \r\n  // .domain([0, data.length-1]) //0 zu 0 ; 6 zu 200\r\n   .range([0, dimensions.width]) //change\r\n  \r\nconst yScale =  scaleLinear()\r\n   .domain([0, 100])   //todo\r\n   .range([dimensions.height, 30]);  //change\r\n\r\n\r\nconst yAxis = axisLeft(yScale);   \r\nsvg\r\n.select('.y-axis')\r\n.style('color', 'grey')\r\n.style('font-size', '14')\r\n.call(yAxis);\r\n\r\n//X-Achsen-Beschriftung\r\nsvg.append(\"text\")\r\n.attr(\"text-anchor\", \"end\")\r\n.attr(\"fill\", \"grey\")\r\n.attr(\"x\", dimensions.width)\r\n .attr(\"y\", dimensions.height  + 50)\r\n .text(\"Jahr\");\r\n\r\nconst xAxis = axisBottom(xScale)\r\nsvg\r\n.select(\".x-axis\")\r\n.style('transform', `translateY(${dimensions.height}px)`)\r\n.style('color', 'grey')\r\n.style('font-size', '14')\r\n.style('stroke-width', 1)\r\n.call(xAxis);\r\n\r\n//Grids\r\nvar grids = svg.append(\"g\")\r\n   .attr(\"class\", \"grid\")\r\n   .attr('transform', 'translate(50,50')\r\n   .call(axisLeft(yScale)\r\n      .tickSize(-(dimensions.width))\r\n      .tickFormat(\"\")\r\n      )\r\n\r\n//Y-Achsen-Beschrifzung\r\nsvg.append(\"text\")\r\n.attr(\"text-anchor\", \"end\")\r\n.attr(\"transform\", \"rotate(-90)\")\r\n.attr(\"fill\", \"grey\")\r\n.attr(\"y\", - 50)\r\n.attr(\"x\", 0)\r\n.text(\"Prozent\")\r\n\r\n  const myLine = line()\r\n      .x((d)=> (xScale(new Date(d.time))))\r\n      .y((d)=> (yScale(d.value) - dimensions.height))\r\n      .curve(curveCardinal);\r\n    svg\r\n      .selectAll(\"path\")\r\n      .data([data])\r\n      .join(\"path\")\r\n      .attr(\"d\", (value, index) => myLine(value))\r\n      .attr(\"fill\", \"none\")\r\n      .attr(\"stroke\", \"#2770bc\")\r\n      .attr(\"stroke-width\", \"5\" )\r\n\r\n\r\n  }, [data, dimensions]);\r\n\r\n\r\n  return (\r\n    <div ref={wrapperRef}>\r\n       <svg ref={svgRef}>\r\n          <g className='x-axis' />\r\n          <g className=\"y-axis\" />\r\n       </svg>\r\n       </div>\r\n);\r\n}\r\n\r\nexport default LivingOnlineChart;"]},"metadata":{},"sourceType":"module"}