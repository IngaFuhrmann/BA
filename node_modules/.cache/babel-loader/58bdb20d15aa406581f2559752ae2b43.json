{"ast":null,"code":"var _jsxFileName = \"D:\\\\Studium\\\\Bachelor\\\\WebApp\\\\visapp\\\\src\\\\components\\\\charts\\\\GeoChart.jsx\";\nimport React, { useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { select, geoPath, geoMercator } from \"d3\";\nimport useResizeObserver from './useReziseObserver';\nimport '../../styles/header.css';\n\nfunction GeoChart({\n  data,\n  property\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const nums = this.props.data || []; // const { width, height } =\n    //  dimensions || wrapperRef.current.getCoundingClientRect();\n    // Projiziert die Geo-Koordinaten in 2D\n\n    const projection = geoMercator(); //nimmt Geo-Daten als Input und übersetzt sie in d attributes eines path elements\n\n    const pathGenerator = geoPath().projection(projection); //console.log(data.features);\n\n    svg.selectAll(\".country\").data(data.features).enter().join(\"path\").attr(\"class\", \"country\").attr(\"d\", features => pathGenerator(features));\n  }, [data, dimensions, property]);\n  return React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }));\n}\n\nexport default GeoChart;","map":{"version":3,"sources":["D:/Studium/Bachelor/WebApp/visapp/src/components/charts/GeoChart.jsx"],"names":["React","useEffect","useRef","PropTypes","select","geoPath","geoMercator","useResizeObserver","GeoChart","data","property","svgRef","wrapperRef","dimensions","svg","current","nums","props","projection","pathGenerator","selectAll","features","enter","join","attr","marginBottom"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,QAA6C,IAA7C;AACA,OAAOC,iBAAP,MAA8B,qBAA9B;AACA,OAAO,yBAAP;;AAIA,SAASC,QAAT,CAAkB;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAlB,EAAqC;AACjC,QAAMC,MAAM,GAAGT,MAAM,EAArB;AACA,QAAMU,UAAU,GAAGV,MAAM,EAAzB;AACA,QAAMW,UAAU,GAAGN,iBAAiB,CAACK,UAAD,CAApC;AAIAX,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMa,GAAG,GAAGV,MAAM,CAACO,MAAM,CAACI,OAAR,CAAlB;AACA,UAAMC,IAAI,GAAG,KAAKC,KAAL,CAAWR,IAAX,IAAmB,EAAhC,CAFY,CAMb;AACG;AACE;;AACA,UAAMS,UAAU,GAAGZ,WAAW,EAA9B,CATQ,CAWR;;AACA,UAAMa,aAAa,GAAGd,OAAO,GAAGa,UAAV,CAAqBA,UAArB,CAAtB,CAZQ,CAaR;;AACAJ,IAAAA,GAAG,CACFM,SADD,CACW,UADX,EAECX,IAFD,CAEMA,IAAI,CAACY,QAFX,EAGCC,KAHD,GAICC,IAJD,CAIM,MAJN,EAKCC,IALD,CAKM,OALN,EAKe,SALf,EAMDA,IANC,CAMI,GANJ,EAMSH,QAAQ,IAAIF,aAAa,CAACE,QAAD,CANlC;AAQP,GAtBQ,EAsBN,CAACZ,IAAD,EAAOI,UAAP,EAAmBH,QAAnB,CAtBM,CAAT;AAwBA,SACI;AAAK,IAAA,GAAG,EAAEE,UAAV;AAAsB,IAAA,KAAK,EAAE;AAAEa,MAAAA,YAAY,EAAE;AAAhB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAK,IAAA,GAAG,EAAEd,MAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,CADJ;AAOH;;AAED,eAAeH,QAAf","sourcesContent":["import React, { useEffect, useRef } from \"react\";\r\nimport PropTypes from 'prop-types'\r\nimport { select, geoPath, geoMercator } from \"d3\";\r\nimport useResizeObserver from './useReziseObserver'\r\nimport '../../styles/header.css'\r\n\r\n\r\n\r\nfunction GeoChart({ data, property }){\r\n    const svgRef = useRef();\r\n    const wrapperRef = useRef();\r\n    const dimensions = useResizeObserver(wrapperRef);\r\n  \r\n  \r\n\r\n    useEffect(() => {\r\n        const svg = select(svgRef.current);\r\n        const nums = this.props.data || [];\r\n        \r\n\r\n\r\n       // const { width, height } =\r\n          //  dimensions || wrapperRef.current.getCoundingClientRect();\r\n            // Projiziert die Geo-Koordinaten in 2D\r\n            const projection = geoMercator();\r\n\r\n            //nimmt Geo-Daten als Input und übersetzt sie in d attributes eines path elements\r\n            const pathGenerator = geoPath().projection(projection);\r\n            //console.log(data.features);\r\n            svg\r\n            .selectAll(\".country\")\r\n            .data(data.features)\r\n            .enter()\r\n            .join(\"path\")\r\n            .attr(\"class\", \"country\")\r\n          .attr(\"d\", features => pathGenerator(features));\r\n\r\n    }, [data, dimensions, property]);\r\n   \r\n    return (\r\n        <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\r\n            <svg ref={svgRef}>\r\n            </svg>\r\n            </div>\r\n   );\r\n \r\n}\r\n\r\nexport default GeoChart;\r\n\r\n"]},"metadata":{},"sourceType":"module"}